<?php

namespace Aerospike;

$namespace = 'test';
$set = 'test';
////////////////////////////////////////////////////////////////////////////////
//
//	Creating Client, persisting in permanent storage, retriving from there
//
////////////////////////////////////////////////////////////////////////////////

$socket = "/tmp/asld_grpc.sock";

$client = Client::connect($socket);

var_dump($client->hosts);
////////////////////////////////////////////////////////////////////////////////
//
// Key object
//
////////////////////////////////////////////////////////////////////////////////

$key = new Key("test", "test", 1);
var_dump($key);
// var_dump($key->namespace);
// var_dump($key->setname);
// var_dump($key->value);
// var_dump($key->digest);

////////////////////////////////////////////////////////////////////////////////
//
// client->truncate
//
////////////////////////////////////////////////////////////////////////////////

$ip = new InfoPolicy();
$client->truncate($ip, "test", "test");

////////////////////////////////////////////////////////////////////////////////
//
// client->put
//
////////////////////////////////////////////////////////////////////////////////

$wp = new WritePolicy();
$bin1 = new Bin("bin1", 111);
$bin2 = new Bin("bin2", "string");
$bin3 = new Bin("bin3", 333.333);
$bin4 = new Bin("bin4", [
	"str", 
	1984, 
	333.333, 
	[1, "string", 5.1], 
	[
		"integer" => 1984, 
		"float" => 333.333, 
		"list" => [1, "string", 5.1]
	] 
]);

$bin5 = new Bin("bin5", [
	"integer" => 1984, 
	"float" => 333.333, 
	"list" => [1, "string", 5.1], 
	null => [
		"integer" => 1984, 
		"float" => 333.333, 
		"list" => [1, "string", 5.1]
	],
	"" => [ 1, 2, 3 ],
]);

for ($x = 0; $x < 1000; $x++) {
	$key = new Key("test", "test", $x);
	$bin1 = new Bin("bin1", $x);
	$client->put($wp, $key, [$bin1, $bin2, $bin3, $bin4, $bin5]);
}


////////////////////////////////////////////////////////////////////////////////
//
// client->prepend
//
////////////////////////////////////////////////////////////////////////////////

$client->prepend($wp, $key, [new Bin("bin2", "prefix_")]);

////////////////////////////////////////////////////////////////////////////////
//
// client->append
//
////////////////////////////////////////////////////////////////////////////////

$client->append($wp, $key, [new Bin("bin2", "_suffix")]);

////////////////////////////////////////////////////////////////////////////////
//
// client->get
//
////////////////////////////////////////////////////////////////////////////////

$rp = new ReadPolicy();

$rp->setMaxRetries(3);
$timeInMillis = 3000;
$rp->timeout = $timeInMillis;

for ($x = 0; $x <= 1000; $x++) {
	$record = $client->get($rp, $key, ["bin1"]);
}

$record = $client->get($rp, $key);
var_dump($record->bins);
var_dump($record->generation);
var_dump($record->key);

////////////////////////////////////////////////////////////////////////////////
//
// client->touch
//
////////////////////////////////////////////////////////////////////////////////

$client->touch($wp, $key);

$record = $client->get($rp, $key, []);
var_dump($record->bin("bin1"));
var_dump($record->bin("bin2"));
var_dump($record->generation);

$record = $client->get($rp, $key, ["bin1"]);
var_dump($record->bin("bin1"));
var_dump($record->bin("bin2"));

////////////////////////////////////////////////////////////////////////////////
//
// client->batchRead
//
////////////////////////////////////////////////////////////////////////////////

$brp = new BatchReadPolicy();

$brkey = new Key($namespace, $set, 1);
$batchRead = new BatchRead($brp, $brkey, []);

$bp = new BatchPolicy();
$recs = $client->batch($bp, [$batchRead]);

foreach ($recs->bins as $rec) {
	var_dump($rec);
}


////////////////////////////////////////////////////////////////////////////////
//
// $client->exists
//
////////////////////////////////////////////////////////////////////////////////

$exists = $client->exists($rp, $key);
var_dump($exists);


////////////////////////////////////////////////////////////////////////////////
//
// $client->delete
//
////////////////////////////////////////////////////////////////////////////////

$deleted = $client->delete($wp, $key);
var_dump($deleted);

$exists = $client->exists($rp, $key);
var_dump($exists);

////////////////////////////////////////////////////////////////////////////////
//
// client->dropIndex
//
////////////////////////////////////////////////////////////////////////////////

$client->dropIndex($wp, "test", "test", "test.test.bin1");

////////////////////////////////////////////////////////////////////////////////
//
// $client->createIndex
//
////////////////////////////////////////////////////////////////////////////////

$client->createIndex($wp, "test", "test", "bin1", "test.test.bin1", IndexType::Numeric());

sleep(1);


////////////////////////////////////////////////////////////////////////////////
//
// create a value of certain Value type
//
////////////////////////////////////////////////////////////////////////////////

$geoVal = Value::geoJson("{\"type\":\"Point\",\"coordinates\":[-80.590003, 28.60009]}");
$geoBin = new Bin("Geo_Location", $geoVal); 
