// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: asld_kvs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KVS_Put_FullMethodName              = "/com.aerospike.daemon.KVS/Put"
	KVS_Add_FullMethodName              = "/com.aerospike.daemon.KVS/Add"
	KVS_Append_FullMethodName           = "/com.aerospike.daemon.KVS/Append"
	KVS_Prepend_FullMethodName          = "/com.aerospike.daemon.KVS/Prepend"
	KVS_Get_FullMethodName              = "/com.aerospike.daemon.KVS/Get"
	KVS_GetHeader_FullMethodName        = "/com.aerospike.daemon.KVS/GetHeader"
	KVS_Exists_FullMethodName           = "/com.aerospike.daemon.KVS/Exists"
	KVS_Delete_FullMethodName           = "/com.aerospike.daemon.KVS/Delete"
	KVS_Touch_FullMethodName            = "/com.aerospike.daemon.KVS/Touch"
	KVS_BatchOperate_FullMethodName     = "/com.aerospike.daemon.KVS/BatchOperate"
	KVS_CreateIndex_FullMethodName      = "/com.aerospike.daemon.KVS/CreateIndex"
	KVS_DropIndex_FullMethodName        = "/com.aerospike.daemon.KVS/DropIndex"
	KVS_Truncate_FullMethodName         = "/com.aerospike.daemon.KVS/Truncate"
	KVS_RegisterUDF_FullMethodName      = "/com.aerospike.daemon.KVS/RegisterUDF"
	KVS_DropUDF_FullMethodName          = "/com.aerospike.daemon.KVS/DropUDF"
	KVS_ListUDF_FullMethodName          = "/com.aerospike.daemon.KVS/ListUDF"
	KVS_UDFExecute_FullMethodName       = "/com.aerospike.daemon.KVS/UDFExecute"
	KVS_CreateUser_FullMethodName       = "/com.aerospike.daemon.KVS/CreateUser"
	KVS_DropUser_FullMethodName         = "/com.aerospike.daemon.KVS/DropUser"
	KVS_ChangePassword_FullMethodName   = "/com.aerospike.daemon.KVS/ChangePassword"
	KVS_GrantRoles_FullMethodName       = "/com.aerospike.daemon.KVS/GrantRoles"
	KVS_RevokeRoles_FullMethodName      = "/com.aerospike.daemon.KVS/RevokeRoles"
	KVS_QueryUsers_FullMethodName       = "/com.aerospike.daemon.KVS/QueryUsers"
	KVS_QueryRoles_FullMethodName       = "/com.aerospike.daemon.KVS/QueryRoles"
	KVS_CreateRole_FullMethodName       = "/com.aerospike.daemon.KVS/CreateRole"
	KVS_DropRole_FullMethodName         = "/com.aerospike.daemon.KVS/DropRole"
	KVS_GrantPrivileges_FullMethodName  = "/com.aerospike.daemon.KVS/GrantPrivileges"
	KVS_RevokePrivileges_FullMethodName = "/com.aerospike.daemon.KVS/RevokePrivileges"
	KVS_SetAllowlist_FullMethodName     = "/com.aerospike.daemon.KVS/SetAllowlist"
	KVS_SetQuotas_FullMethodName        = "/com.aerospike.daemon.KVS/SetQuotas"
	KVS_Scan_FullMethodName             = "/com.aerospike.daemon.KVS/Scan"
	KVS_Query_FullMethodName            = "/com.aerospike.daemon.KVS/Query"
)

// KVSClient is the client API for KVS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVSClient interface {
	// Put a single record
	Put(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error)
	// Add a single record
	Add(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error)
	// Append a single record
	Append(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error)
	// Prepend a single record
	Prepend(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error)
	// Read a single record
	Get(ctx context.Context, in *AerospikeGetRequest, opts ...grpc.CallOption) (*AerospikeSingleResponse, error)
	// Get a single record header containing metadata like generation, expiration
	GetHeader(ctx context.Context, in *AerospikeGetHeaderRequest, opts ...grpc.CallOption) (*AerospikeSingleResponse, error)
	// Check if a record exists.
	Exists(ctx context.Context, in *AerospikeExistsRequest, opts ...grpc.CallOption) (*AerospikeExistsResponse, error)
	// Delete a single record.
	Delete(ctx context.Context, in *AerospikeDeleteRequest, opts ...grpc.CallOption) (*AerospikeDeleteResponse, error)
	// Reset single record's time to expiration using the write policy's expiration.
	Touch(ctx context.Context, in *AerospikeTouchRequest, opts ...grpc.CallOption) (*Error, error)
	// Process batch requests.
	BatchOperate(ctx context.Context, in *AerospikeBatchOperateRequest, opts ...grpc.CallOption) (*AerospikeBatchOperateResponse, error)
	// Process batch requests.
	CreateIndex(ctx context.Context, in *AerospikeCreateIndexRequest, opts ...grpc.CallOption) (*AerospikeCreateIndexResponse, error)
	// Process batch requests.
	DropIndex(ctx context.Context, in *AerospikeDropIndexRequest, opts ...grpc.CallOption) (*AerospikeDropIndexResponse, error)
	// Truncate removes records in specified namespace/set efficiently.
	Truncate(ctx context.Context, in *AerospikeTruncateRequest, opts ...grpc.CallOption) (*AerospikeTruncateResponse, error)
	// Registers a package containing user defined functions with server.
	// This asynchronous server call will return before command is complete.
	// The user can optionally wait for command completion by using the returned
	// RegisterTask instance.
	//
	// This method is only supported by Aerospike 3+ servers.
	RegisterUDF(ctx context.Context, in *AerospikeRegisterUDFRequest, opts ...grpc.CallOption) (*AerospikeRegisterUDFResponse, error)
	// Removes a package containing user defined functions in the server.
	// This asynchronous server call will return before command is complete.
	// The user can optionally wait for command completion by using the returned
	// RemoveTask instance.
	//
	// This method is only supported by Aerospike 3+ servers.
	DropUDF(ctx context.Context, in *AerospikeDropUDFRequest, opts ...grpc.CallOption) (*AerospikeDropUDFResponse, error)
	// Lists all packages containing user defined functions in the server.
	// This method is only supported by Aerospike 3+ servers.
	ListUDF(ctx context.Context, in *AerospikeListUDFRequest, opts ...grpc.CallOption) (*AerospikeListUDFResponse, error)
	// Lists all packages containing user defined functions in the server.
	// This method is only supported by Aerospike 3+ servers.
	UDFExecute(ctx context.Context, in *AerospikeUDFExecuteRequest, opts ...grpc.CallOption) (*AerospikeUDFExecuteResponse, error)
	// CreateUser creates a new user with password and roles.
	CreateUser(ctx context.Context, in *AerospikeCreateUserRequest, opts ...grpc.CallOption) (*AerospikeCreateUserResponse, error)
	// DropUser removes a user from the cluster.
	DropUser(ctx context.Context, in *AerospikeDropUserRequest, opts ...grpc.CallOption) (*AerospikeDropUserResponse, error)
	// ChangePassword changes a user's password. Clear-text password will be hashed using bcrypt before sending to server.
	ChangePassword(ctx context.Context, in *AerospikeChangePasswordRequest, opts ...grpc.CallOption) (*AerospikeChangePasswordResponse, error)
	// GrantRoles adds roles to user's list of roles.
	GrantRoles(ctx context.Context, in *AerospikeGrantRolesRequest, opts ...grpc.CallOption) (*AerospikeGrantRolesResponse, error)
	// RevokeRoles removes roles from user's list of roles.
	RevokeRoles(ctx context.Context, in *AerospikeRevokeRolesRequest, opts ...grpc.CallOption) (*AerospikeRevokeRolesResponse, error)
	// QueryUsers retrieves all users and their roles.
	QueryUsers(ctx context.Context, in *AerospikeQueryUsersRequest, opts ...grpc.CallOption) (*AerospikeQueryUsersResponse, error)
	// QueryRoles retrieves all roles and their privileges.
	QueryRoles(ctx context.Context, in *AerospikeQueryRolesRequest, opts ...grpc.CallOption) (*AerospikeQueryRolesResponse, error)
	// CreateRole creates a user-defined role.
	// Quotas require server security configuration "enable-quotas" to be set to true.
	// Pass 0 for quota values for no limit.
	CreateRole(ctx context.Context, in *AerospikeCreateRoleRequest, opts ...grpc.CallOption) (*AerospikeCreateRoleResponse, error)
	// DropRole removes a user-defined role.
	DropRole(ctx context.Context, in *AerospikeDropRoleRequest, opts ...grpc.CallOption) (*AerospikeDropRoleResponse, error)
	// GrantPrivileges grant privileges to a user-defined role.
	GrantPrivileges(ctx context.Context, in *AerospikeGrantPrivilegesRequest, opts ...grpc.CallOption) (*AerospikeGrantPrivilegesResponse, error)
	// RevokePrivileges revokes privileges from a user-defined role.
	RevokePrivileges(ctx context.Context, in *AerospikeRevokePrivilegesRequest, opts ...grpc.CallOption) (*AerospikeRevokePrivilegesResponse, error)
	// SetAllowlist sets IP address whitelist for a role. If whitelist is nil or empty, it removes existing whitelist from role.
	SetAllowlist(ctx context.Context, in *AerospikeSetAllowlistRequest, opts ...grpc.CallOption) (*AerospikeSetAllowlistResponse, error)
	// SetQuotas sets maximum reads/writes per second limits for a role.  If a quota is zero, the limit is removed.
	// Quotas require server security configuration "enable-quotas" to be set to true.
	// Pass 0 for quota values for no limit.
	SetQuotas(ctx context.Context, in *AerospikeSetQuotasRequest, opts ...grpc.CallOption) (*AerospikeSetQuotasResponse, error)
	Scan(ctx context.Context, in *AerospikeScanRequest, opts ...grpc.CallOption) (KVS_ScanClient, error)
	Query(ctx context.Context, in *AerospikeQueryRequest, opts ...grpc.CallOption) (KVS_QueryClient, error)
}

type kVSClient struct {
	cc grpc.ClientConnInterface
}

func NewKVSClient(cc grpc.ClientConnInterface) KVSClient {
	return &kVSClient{cc}
}

func (c *kVSClient) Put(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, KVS_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Add(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, KVS_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Append(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, KVS_Append_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Prepend(ctx context.Context, in *AerospikePutRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, KVS_Prepend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Get(ctx context.Context, in *AerospikeGetRequest, opts ...grpc.CallOption) (*AerospikeSingleResponse, error) {
	out := new(AerospikeSingleResponse)
	err := c.cc.Invoke(ctx, KVS_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) GetHeader(ctx context.Context, in *AerospikeGetHeaderRequest, opts ...grpc.CallOption) (*AerospikeSingleResponse, error) {
	out := new(AerospikeSingleResponse)
	err := c.cc.Invoke(ctx, KVS_GetHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Exists(ctx context.Context, in *AerospikeExistsRequest, opts ...grpc.CallOption) (*AerospikeExistsResponse, error) {
	out := new(AerospikeExistsResponse)
	err := c.cc.Invoke(ctx, KVS_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Delete(ctx context.Context, in *AerospikeDeleteRequest, opts ...grpc.CallOption) (*AerospikeDeleteResponse, error) {
	out := new(AerospikeDeleteResponse)
	err := c.cc.Invoke(ctx, KVS_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Touch(ctx context.Context, in *AerospikeTouchRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, KVS_Touch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) BatchOperate(ctx context.Context, in *AerospikeBatchOperateRequest, opts ...grpc.CallOption) (*AerospikeBatchOperateResponse, error) {
	out := new(AerospikeBatchOperateResponse)
	err := c.cc.Invoke(ctx, KVS_BatchOperate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) CreateIndex(ctx context.Context, in *AerospikeCreateIndexRequest, opts ...grpc.CallOption) (*AerospikeCreateIndexResponse, error) {
	out := new(AerospikeCreateIndexResponse)
	err := c.cc.Invoke(ctx, KVS_CreateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) DropIndex(ctx context.Context, in *AerospikeDropIndexRequest, opts ...grpc.CallOption) (*AerospikeDropIndexResponse, error) {
	out := new(AerospikeDropIndexResponse)
	err := c.cc.Invoke(ctx, KVS_DropIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Truncate(ctx context.Context, in *AerospikeTruncateRequest, opts ...grpc.CallOption) (*AerospikeTruncateResponse, error) {
	out := new(AerospikeTruncateResponse)
	err := c.cc.Invoke(ctx, KVS_Truncate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) RegisterUDF(ctx context.Context, in *AerospikeRegisterUDFRequest, opts ...grpc.CallOption) (*AerospikeRegisterUDFResponse, error) {
	out := new(AerospikeRegisterUDFResponse)
	err := c.cc.Invoke(ctx, KVS_RegisterUDF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) DropUDF(ctx context.Context, in *AerospikeDropUDFRequest, opts ...grpc.CallOption) (*AerospikeDropUDFResponse, error) {
	out := new(AerospikeDropUDFResponse)
	err := c.cc.Invoke(ctx, KVS_DropUDF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) ListUDF(ctx context.Context, in *AerospikeListUDFRequest, opts ...grpc.CallOption) (*AerospikeListUDFResponse, error) {
	out := new(AerospikeListUDFResponse)
	err := c.cc.Invoke(ctx, KVS_ListUDF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) UDFExecute(ctx context.Context, in *AerospikeUDFExecuteRequest, opts ...grpc.CallOption) (*AerospikeUDFExecuteResponse, error) {
	out := new(AerospikeUDFExecuteResponse)
	err := c.cc.Invoke(ctx, KVS_UDFExecute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) CreateUser(ctx context.Context, in *AerospikeCreateUserRequest, opts ...grpc.CallOption) (*AerospikeCreateUserResponse, error) {
	out := new(AerospikeCreateUserResponse)
	err := c.cc.Invoke(ctx, KVS_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) DropUser(ctx context.Context, in *AerospikeDropUserRequest, opts ...grpc.CallOption) (*AerospikeDropUserResponse, error) {
	out := new(AerospikeDropUserResponse)
	err := c.cc.Invoke(ctx, KVS_DropUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) ChangePassword(ctx context.Context, in *AerospikeChangePasswordRequest, opts ...grpc.CallOption) (*AerospikeChangePasswordResponse, error) {
	out := new(AerospikeChangePasswordResponse)
	err := c.cc.Invoke(ctx, KVS_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) GrantRoles(ctx context.Context, in *AerospikeGrantRolesRequest, opts ...grpc.CallOption) (*AerospikeGrantRolesResponse, error) {
	out := new(AerospikeGrantRolesResponse)
	err := c.cc.Invoke(ctx, KVS_GrantRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) RevokeRoles(ctx context.Context, in *AerospikeRevokeRolesRequest, opts ...grpc.CallOption) (*AerospikeRevokeRolesResponse, error) {
	out := new(AerospikeRevokeRolesResponse)
	err := c.cc.Invoke(ctx, KVS_RevokeRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) QueryUsers(ctx context.Context, in *AerospikeQueryUsersRequest, opts ...grpc.CallOption) (*AerospikeQueryUsersResponse, error) {
	out := new(AerospikeQueryUsersResponse)
	err := c.cc.Invoke(ctx, KVS_QueryUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) QueryRoles(ctx context.Context, in *AerospikeQueryRolesRequest, opts ...grpc.CallOption) (*AerospikeQueryRolesResponse, error) {
	out := new(AerospikeQueryRolesResponse)
	err := c.cc.Invoke(ctx, KVS_QueryRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) CreateRole(ctx context.Context, in *AerospikeCreateRoleRequest, opts ...grpc.CallOption) (*AerospikeCreateRoleResponse, error) {
	out := new(AerospikeCreateRoleResponse)
	err := c.cc.Invoke(ctx, KVS_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) DropRole(ctx context.Context, in *AerospikeDropRoleRequest, opts ...grpc.CallOption) (*AerospikeDropRoleResponse, error) {
	out := new(AerospikeDropRoleResponse)
	err := c.cc.Invoke(ctx, KVS_DropRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) GrantPrivileges(ctx context.Context, in *AerospikeGrantPrivilegesRequest, opts ...grpc.CallOption) (*AerospikeGrantPrivilegesResponse, error) {
	out := new(AerospikeGrantPrivilegesResponse)
	err := c.cc.Invoke(ctx, KVS_GrantPrivileges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) RevokePrivileges(ctx context.Context, in *AerospikeRevokePrivilegesRequest, opts ...grpc.CallOption) (*AerospikeRevokePrivilegesResponse, error) {
	out := new(AerospikeRevokePrivilegesResponse)
	err := c.cc.Invoke(ctx, KVS_RevokePrivileges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) SetAllowlist(ctx context.Context, in *AerospikeSetAllowlistRequest, opts ...grpc.CallOption) (*AerospikeSetAllowlistResponse, error) {
	out := new(AerospikeSetAllowlistResponse)
	err := c.cc.Invoke(ctx, KVS_SetAllowlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) SetQuotas(ctx context.Context, in *AerospikeSetQuotasRequest, opts ...grpc.CallOption) (*AerospikeSetQuotasResponse, error) {
	out := new(AerospikeSetQuotasResponse)
	err := c.cc.Invoke(ctx, KVS_SetQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVSClient) Scan(ctx context.Context, in *AerospikeScanRequest, opts ...grpc.CallOption) (KVS_ScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &KVS_ServiceDesc.Streams[0], KVS_Scan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kVSScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KVS_ScanClient interface {
	Recv() (*AerospikeStreamResponse, error)
	grpc.ClientStream
}

type kVSScanClient struct {
	grpc.ClientStream
}

func (x *kVSScanClient) Recv() (*AerospikeStreamResponse, error) {
	m := new(AerospikeStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kVSClient) Query(ctx context.Context, in *AerospikeQueryRequest, opts ...grpc.CallOption) (KVS_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &KVS_ServiceDesc.Streams[1], KVS_Query_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kVSQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KVS_QueryClient interface {
	Recv() (*AerospikeStreamResponse, error)
	grpc.ClientStream
}

type kVSQueryClient struct {
	grpc.ClientStream
}

func (x *kVSQueryClient) Recv() (*AerospikeStreamResponse, error) {
	m := new(AerospikeStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KVSServer is the server API for KVS service.
// All implementations must embed UnimplementedKVSServer
// for forward compatibility
type KVSServer interface {
	// Put a single record
	Put(context.Context, *AerospikePutRequest) (*Error, error)
	// Add a single record
	Add(context.Context, *AerospikePutRequest) (*Error, error)
	// Append a single record
	Append(context.Context, *AerospikePutRequest) (*Error, error)
	// Prepend a single record
	Prepend(context.Context, *AerospikePutRequest) (*Error, error)
	// Read a single record
	Get(context.Context, *AerospikeGetRequest) (*AerospikeSingleResponse, error)
	// Get a single record header containing metadata like generation, expiration
	GetHeader(context.Context, *AerospikeGetHeaderRequest) (*AerospikeSingleResponse, error)
	// Check if a record exists.
	Exists(context.Context, *AerospikeExistsRequest) (*AerospikeExistsResponse, error)
	// Delete a single record.
	Delete(context.Context, *AerospikeDeleteRequest) (*AerospikeDeleteResponse, error)
	// Reset single record's time to expiration using the write policy's expiration.
	Touch(context.Context, *AerospikeTouchRequest) (*Error, error)
	// Process batch requests.
	BatchOperate(context.Context, *AerospikeBatchOperateRequest) (*AerospikeBatchOperateResponse, error)
	// Process batch requests.
	CreateIndex(context.Context, *AerospikeCreateIndexRequest) (*AerospikeCreateIndexResponse, error)
	// Process batch requests.
	DropIndex(context.Context, *AerospikeDropIndexRequest) (*AerospikeDropIndexResponse, error)
	// Truncate removes records in specified namespace/set efficiently.
	Truncate(context.Context, *AerospikeTruncateRequest) (*AerospikeTruncateResponse, error)
	// Registers a package containing user defined functions with server.
	// This asynchronous server call will return before command is complete.
	// The user can optionally wait for command completion by using the returned
	// RegisterTask instance.
	//
	// This method is only supported by Aerospike 3+ servers.
	RegisterUDF(context.Context, *AerospikeRegisterUDFRequest) (*AerospikeRegisterUDFResponse, error)
	// Removes a package containing user defined functions in the server.
	// This asynchronous server call will return before command is complete.
	// The user can optionally wait for command completion by using the returned
	// RemoveTask instance.
	//
	// This method is only supported by Aerospike 3+ servers.
	DropUDF(context.Context, *AerospikeDropUDFRequest) (*AerospikeDropUDFResponse, error)
	// Lists all packages containing user defined functions in the server.
	// This method is only supported by Aerospike 3+ servers.
	ListUDF(context.Context, *AerospikeListUDFRequest) (*AerospikeListUDFResponse, error)
	// Lists all packages containing user defined functions in the server.
	// This method is only supported by Aerospike 3+ servers.
	UDFExecute(context.Context, *AerospikeUDFExecuteRequest) (*AerospikeUDFExecuteResponse, error)
	// CreateUser creates a new user with password and roles.
	CreateUser(context.Context, *AerospikeCreateUserRequest) (*AerospikeCreateUserResponse, error)
	// DropUser removes a user from the cluster.
	DropUser(context.Context, *AerospikeDropUserRequest) (*AerospikeDropUserResponse, error)
	// ChangePassword changes a user's password. Clear-text password will be hashed using bcrypt before sending to server.
	ChangePassword(context.Context, *AerospikeChangePasswordRequest) (*AerospikeChangePasswordResponse, error)
	// GrantRoles adds roles to user's list of roles.
	GrantRoles(context.Context, *AerospikeGrantRolesRequest) (*AerospikeGrantRolesResponse, error)
	// RevokeRoles removes roles from user's list of roles.
	RevokeRoles(context.Context, *AerospikeRevokeRolesRequest) (*AerospikeRevokeRolesResponse, error)
	// QueryUsers retrieves all users and their roles.
	QueryUsers(context.Context, *AerospikeQueryUsersRequest) (*AerospikeQueryUsersResponse, error)
	// QueryRoles retrieves all roles and their privileges.
	QueryRoles(context.Context, *AerospikeQueryRolesRequest) (*AerospikeQueryRolesResponse, error)
	// CreateRole creates a user-defined role.
	// Quotas require server security configuration "enable-quotas" to be set to true.
	// Pass 0 for quota values for no limit.
	CreateRole(context.Context, *AerospikeCreateRoleRequest) (*AerospikeCreateRoleResponse, error)
	// DropRole removes a user-defined role.
	DropRole(context.Context, *AerospikeDropRoleRequest) (*AerospikeDropRoleResponse, error)
	// GrantPrivileges grant privileges to a user-defined role.
	GrantPrivileges(context.Context, *AerospikeGrantPrivilegesRequest) (*AerospikeGrantPrivilegesResponse, error)
	// RevokePrivileges revokes privileges from a user-defined role.
	RevokePrivileges(context.Context, *AerospikeRevokePrivilegesRequest) (*AerospikeRevokePrivilegesResponse, error)
	// SetAllowlist sets IP address whitelist for a role. If whitelist is nil or empty, it removes existing whitelist from role.
	SetAllowlist(context.Context, *AerospikeSetAllowlistRequest) (*AerospikeSetAllowlistResponse, error)
	// SetQuotas sets maximum reads/writes per second limits for a role.  If a quota is zero, the limit is removed.
	// Quotas require server security configuration "enable-quotas" to be set to true.
	// Pass 0 for quota values for no limit.
	SetQuotas(context.Context, *AerospikeSetQuotasRequest) (*AerospikeSetQuotasResponse, error)
	Scan(*AerospikeScanRequest, KVS_ScanServer) error
	Query(*AerospikeQueryRequest, KVS_QueryServer) error
	mustEmbedUnimplementedKVSServer()
}

// UnimplementedKVSServer must be embedded to have forward compatible implementations.
type UnimplementedKVSServer struct {
}

func (UnimplementedKVSServer) Put(context.Context, *AerospikePutRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKVSServer) Add(context.Context, *AerospikePutRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedKVSServer) Append(context.Context, *AerospikePutRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedKVSServer) Prepend(context.Context, *AerospikePutRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepend not implemented")
}
func (UnimplementedKVSServer) Get(context.Context, *AerospikeGetRequest) (*AerospikeSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVSServer) GetHeader(context.Context, *AerospikeGetHeaderRequest) (*AerospikeSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeader not implemented")
}
func (UnimplementedKVSServer) Exists(context.Context, *AerospikeExistsRequest) (*AerospikeExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedKVSServer) Delete(context.Context, *AerospikeDeleteRequest) (*AerospikeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKVSServer) Touch(context.Context, *AerospikeTouchRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Touch not implemented")
}
func (UnimplementedKVSServer) BatchOperate(context.Context, *AerospikeBatchOperateRequest) (*AerospikeBatchOperateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperate not implemented")
}
func (UnimplementedKVSServer) CreateIndex(context.Context, *AerospikeCreateIndexRequest) (*AerospikeCreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedKVSServer) DropIndex(context.Context, *AerospikeDropIndexRequest) (*AerospikeDropIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedKVSServer) Truncate(context.Context, *AerospikeTruncateRequest) (*AerospikeTruncateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedKVSServer) RegisterUDF(context.Context, *AerospikeRegisterUDFRequest) (*AerospikeRegisterUDFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUDF not implemented")
}
func (UnimplementedKVSServer) DropUDF(context.Context, *AerospikeDropUDFRequest) (*AerospikeDropUDFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropUDF not implemented")
}
func (UnimplementedKVSServer) ListUDF(context.Context, *AerospikeListUDFRequest) (*AerospikeListUDFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUDF not implemented")
}
func (UnimplementedKVSServer) UDFExecute(context.Context, *AerospikeUDFExecuteRequest) (*AerospikeUDFExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UDFExecute not implemented")
}
func (UnimplementedKVSServer) CreateUser(context.Context, *AerospikeCreateUserRequest) (*AerospikeCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedKVSServer) DropUser(context.Context, *AerospikeDropUserRequest) (*AerospikeDropUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropUser not implemented")
}
func (UnimplementedKVSServer) ChangePassword(context.Context, *AerospikeChangePasswordRequest) (*AerospikeChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedKVSServer) GrantRoles(context.Context, *AerospikeGrantRolesRequest) (*AerospikeGrantRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantRoles not implemented")
}
func (UnimplementedKVSServer) RevokeRoles(context.Context, *AerospikeRevokeRolesRequest) (*AerospikeRevokeRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRoles not implemented")
}
func (UnimplementedKVSServer) QueryUsers(context.Context, *AerospikeQueryUsersRequest) (*AerospikeQueryUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsers not implemented")
}
func (UnimplementedKVSServer) QueryRoles(context.Context, *AerospikeQueryRolesRequest) (*AerospikeQueryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoles not implemented")
}
func (UnimplementedKVSServer) CreateRole(context.Context, *AerospikeCreateRoleRequest) (*AerospikeCreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedKVSServer) DropRole(context.Context, *AerospikeDropRoleRequest) (*AerospikeDropRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropRole not implemented")
}
func (UnimplementedKVSServer) GrantPrivileges(context.Context, *AerospikeGrantPrivilegesRequest) (*AerospikeGrantPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantPrivileges not implemented")
}
func (UnimplementedKVSServer) RevokePrivileges(context.Context, *AerospikeRevokePrivilegesRequest) (*AerospikeRevokePrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePrivileges not implemented")
}
func (UnimplementedKVSServer) SetAllowlist(context.Context, *AerospikeSetAllowlistRequest) (*AerospikeSetAllowlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllowlist not implemented")
}
func (UnimplementedKVSServer) SetQuotas(context.Context, *AerospikeSetQuotasRequest) (*AerospikeSetQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQuotas not implemented")
}
func (UnimplementedKVSServer) Scan(*AerospikeScanRequest, KVS_ScanServer) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedKVSServer) Query(*AerospikeQueryRequest, KVS_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedKVSServer) mustEmbedUnimplementedKVSServer() {}

// UnsafeKVSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVSServer will
// result in compilation errors.
type UnsafeKVSServer interface {
	mustEmbedUnimplementedKVSServer()
}

func RegisterKVSServer(s grpc.ServiceRegistrar, srv KVSServer) {
	s.RegisterService(&KVS_ServiceDesc, srv)
}

func _KVS_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Put(ctx, req.(*AerospikePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Add(ctx, req.(*AerospikePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Append(ctx, req.(*AerospikePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Prepend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Prepend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Prepend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Prepend(ctx, req.(*AerospikePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Get(ctx, req.(*AerospikeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_GetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeGetHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).GetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_GetHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).GetHeader(ctx, req.(*AerospikeGetHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Exists(ctx, req.(*AerospikeExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Delete(ctx, req.(*AerospikeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Touch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeTouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Touch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Touch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Touch(ctx, req.(*AerospikeTouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_BatchOperate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeBatchOperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).BatchOperate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_BatchOperate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).BatchOperate(ctx, req.(*AerospikeBatchOperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeCreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).CreateIndex(ctx, req.(*AerospikeCreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeDropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_DropIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).DropIndex(ctx, req.(*AerospikeDropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeTruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_Truncate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).Truncate(ctx, req.(*AerospikeTruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_RegisterUDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeRegisterUDFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).RegisterUDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_RegisterUDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).RegisterUDF(ctx, req.(*AerospikeRegisterUDFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_DropUDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeDropUDFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).DropUDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_DropUDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).DropUDF(ctx, req.(*AerospikeDropUDFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_ListUDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeListUDFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).ListUDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_ListUDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).ListUDF(ctx, req.(*AerospikeListUDFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_UDFExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeUDFExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).UDFExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_UDFExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).UDFExecute(ctx, req.(*AerospikeUDFExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).CreateUser(ctx, req.(*AerospikeCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_DropUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeDropUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).DropUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_DropUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).DropUser(ctx, req.(*AerospikeDropUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).ChangePassword(ctx, req.(*AerospikeChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_GrantRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeGrantRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).GrantRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_GrantRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).GrantRoles(ctx, req.(*AerospikeGrantRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_RevokeRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeRevokeRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).RevokeRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_RevokeRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).RevokeRoles(ctx, req.(*AerospikeRevokeRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_QueryUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeQueryUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).QueryUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_QueryUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).QueryUsers(ctx, req.(*AerospikeQueryUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_QueryRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeQueryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).QueryRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_QueryRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).QueryRoles(ctx, req.(*AerospikeQueryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeCreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).CreateRole(ctx, req.(*AerospikeCreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_DropRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeDropRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).DropRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_DropRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).DropRole(ctx, req.(*AerospikeDropRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_GrantPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeGrantPrivilegesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).GrantPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_GrantPrivileges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).GrantPrivileges(ctx, req.(*AerospikeGrantPrivilegesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_RevokePrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeRevokePrivilegesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).RevokePrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_RevokePrivileges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).RevokePrivileges(ctx, req.(*AerospikeRevokePrivilegesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_SetAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeSetAllowlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).SetAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_SetAllowlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).SetAllowlist(ctx, req.(*AerospikeSetAllowlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_SetQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AerospikeSetQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVSServer).SetQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVS_SetQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVSServer).SetQuotas(ctx, req.(*AerospikeSetQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVS_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AerospikeScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVSServer).Scan(m, &kVSScanServer{stream})
}

type KVS_ScanServer interface {
	Send(*AerospikeStreamResponse) error
	grpc.ServerStream
}

type kVSScanServer struct {
	grpc.ServerStream
}

func (x *kVSScanServer) Send(m *AerospikeStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KVS_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AerospikeQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVSServer).Query(m, &kVSQueryServer{stream})
}

type KVS_QueryServer interface {
	Send(*AerospikeStreamResponse) error
	grpc.ServerStream
}

type kVSQueryServer struct {
	grpc.ServerStream
}

func (x *kVSQueryServer) Send(m *AerospikeStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KVS_ServiceDesc is the grpc.ServiceDesc for KVS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.aerospike.daemon.KVS",
	HandlerType: (*KVSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KVS_Put_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _KVS_Add_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _KVS_Append_Handler,
		},
		{
			MethodName: "Prepend",
			Handler:    _KVS_Prepend_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KVS_Get_Handler,
		},
		{
			MethodName: "GetHeader",
			Handler:    _KVS_GetHeader_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _KVS_Exists_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KVS_Delete_Handler,
		},
		{
			MethodName: "Touch",
			Handler:    _KVS_Touch_Handler,
		},
		{
			MethodName: "BatchOperate",
			Handler:    _KVS_BatchOperate_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _KVS_CreateIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _KVS_DropIndex_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _KVS_Truncate_Handler,
		},
		{
			MethodName: "RegisterUDF",
			Handler:    _KVS_RegisterUDF_Handler,
		},
		{
			MethodName: "DropUDF",
			Handler:    _KVS_DropUDF_Handler,
		},
		{
			MethodName: "ListUDF",
			Handler:    _KVS_ListUDF_Handler,
		},
		{
			MethodName: "UDFExecute",
			Handler:    _KVS_UDFExecute_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _KVS_CreateUser_Handler,
		},
		{
			MethodName: "DropUser",
			Handler:    _KVS_DropUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _KVS_ChangePassword_Handler,
		},
		{
			MethodName: "GrantRoles",
			Handler:    _KVS_GrantRoles_Handler,
		},
		{
			MethodName: "RevokeRoles",
			Handler:    _KVS_RevokeRoles_Handler,
		},
		{
			MethodName: "QueryUsers",
			Handler:    _KVS_QueryUsers_Handler,
		},
		{
			MethodName: "QueryRoles",
			Handler:    _KVS_QueryRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _KVS_CreateRole_Handler,
		},
		{
			MethodName: "DropRole",
			Handler:    _KVS_DropRole_Handler,
		},
		{
			MethodName: "GrantPrivileges",
			Handler:    _KVS_GrantPrivileges_Handler,
		},
		{
			MethodName: "RevokePrivileges",
			Handler:    _KVS_RevokePrivileges_Handler,
		},
		{
			MethodName: "SetAllowlist",
			Handler:    _KVS_SetAllowlist_Handler,
		},
		{
			MethodName: "SetQuotas",
			Handler:    _KVS_SetQuotas_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _KVS_Scan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _KVS_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "asld_kvs.proto",
}
