syntax = "proto3";

package com.aerospike.daemon;

option go_package = "proto/;proto";

// Server particle types. Unsupported types are commented out.
enum ParticleType {
	ParticleTypeNull    = 0;
	ParticleTypeInteger = 1;
	ParticleTypeFloat   = 2;
	ParticleTypeString  = 3;
	ParticleTypeBlob    = 4;
	ParticleTypeDigest  = 6;
	ParticleTypeBool    = 17;
	ParticleTypeHLL     = 18;
	ParticleTypeMap     = 19;
	ParticleTypeList    = 20;
	ParticleTypeLDT     = 21;
	ParticleTypeGeoJson = 23;
}

enum ExpType {
    ExpTypeNil = 0;
    ExpTypeBool = 1;
    ExpTypeInt = 2;
    ExpTypeString = 3;
    ExpTypeList = 4;
    ExpTypeMap = 5;
    ExpTypeBlob = 6;
    ExpTypeFloat = 7;
    ExpTypeGeo = 8;
    ExpTypeHll = 9;
}

enum ExpOp {
	ExpOpUnknown  = 0;
	ExpOpEq  = 1;
	ExpOpNe  = 2;
	ExpOpGt  = 3;
	ExpOpGe  = 4;
	ExpOpLt  = 5;
	ExpOpLe  = 6;
	ExpOpRegex  = 7;
	ExpOpGeo  = 8;
	ExpOpAnd = 16;
	ExpOpOr = 17;
	ExpOpNot = 18;
	ExpOpExclusive = 19;
	ExpOpAdd = 20;
	ExpOpSub = 21;
	ExpOpMul = 22;
	ExpOpDiv = 23;
	ExpOpPow = 24;
	ExpOpLog = 25;
	ExpOpMod = 26;
	ExpOpAbs = 27;
	ExpOpFloor = 28;
	ExpOpCeil = 29;
	ExpOpToInt = 30;
	ExpOpToFloat = 31;
	ExpOpIntAnd = 32;
	ExpOpIntOr = 33;
	ExpOpIntXor = 34;
	ExpOpIntNot = 35;
	ExpOpIntLShift = 36;
	ExpOpIntRShift = 37;
	ExpOpIntARShift = 38;
	ExpOpIntCount = 39;
	ExpOpIntLScan = 40;
	ExpOpIntRScan = 41;
	ExpOpMin = 50;
	ExpOpMax = 51;
	ExpOpDigestModulo = 64;
	ExpOpDeviceSize = 65;
	ExpOpLastUpdate = 66;
	ExpOpSinceUpdate = 67;
	ExpOpVoidTime = 68;
	ExpOpTtl = 69;
	ExpOpSetName = 70;
	ExpOpKeyExists = 71;
	ExpOpIsTombstone = 72;
	ExpOpMemorySize = 73;
	ExpOpRecordSize = 74;
	ExpOpKey = 80;
	ExpOpBin = 81;
	ExpOpBinType = 82;
	ExpOpCond = 123;
	ExpOpVar  = 124;
	ExpOpLet  = 125;
	ExpOpQuoted = 126;
	ExpOpCall = 127;
}

// Expression which can be applied to most commands, to control which records are
// affected by the command.
message Expression {
	// The Operation code
	optional ExpOp cmd = 1;

	// The Primary Value of the Operation
	optional Value val = 2;

	// The Bin to use it on (REGEX for example)
	optional Expression bin = 3;

	// The additional flags for the Operation (REGEX or return_type of Module for example)
	optional int64 flags = 4;

	// The optional Module flag for Module operations or Bin Types
	optional ExpType module = 5;

	// Sub commands for the CmdExp operation
	repeated Expression exps = 6;
}

// Read policy for AP (availability) namespaces.
// How duplicates should be consulted in a read operation.
// Only makes a difference during migrations and only applicable in AP mode.
enum ReadModeAP {
  // Involve single node in the read operation.
  ReadModeAPOne = 0;

  // Involve all duplicates in the read operation.
  ReadModeAPAll = 1;
}

// Read policy for SC (strong consistency) namespaces.
// Determines SC read consistency options.
enum ReadModeSC {
  // Ensures this client will only see an increasing sequence of record versions.
  // Server only reads from master.  This is the default.
  ReadModeSCSession = 0;

  // Ensures ALL clients will only see an increasing sequence of record versions.
  // Server only reads from master.
  ReadModeSCLinearize = 1;

  // Server may read from master or any full (non-migrating) replica.
  // Increasing sequence of record versions is not guaranteed.
  ReadModeSCAllowReplica = 2;

  // Server may read from master or any full (non-migrating) replica or from unavailable
  // partitions.  Increasing sequence of record versions is not guaranteed.
  ReadModeSCAllowUnavailable = 3;
}

// Defines algorithm used to determine the target node for a command.
// Scan and query are not affected by replica algorithm.
//
// Note: The enum ordinals do not match the Aerospike Client ordinals because
// the default has to be ordinal zero in protobuf.
enum ReplicaPolicy {
  // Try node containing master partition first.
  // If connection fails, all commands try nodes containing replicated partitions.
  // If socketTimeout is reached, reads also try nodes containing replicated partitions,
  // but writes remain on master node.
  SEQUENCE = 0;

  // Use node containing key's master partition.
  MASTER = 1;

  // Distribute reads across nodes containing key's master and replicated partitions
  // in round-robin fashion.  Writes always use node containing key's master partition.
  MASTER_PROLES = 2;

  // Try node on the same rack as the client first.  If timeout or there are no nodes on the
  // same rack, use SEQUENCE instead.
  PREFER_RACK = 3;

  // Distribute reads across all nodes in cluster in round-robin fashion.
  // Writes always use node containing key's master partition.
  // This option is useful when the replication factor equals the number
  // of nodes in the cluster and the overhead of requesting proles is not desired.
  RANDOM = 4;
}

enum ConsistencyLevel {
    ConsistencyOne = 0;
    ConsistencyAll = 1;
}

// IndexType the type of the secondary index.
enum IndexType {
	// Index on numeric values.
	IndexTypeNumeric = 0;

	// Index on string values.
	IndexTypeString = 1;

	// Index on []byte values. Requires server version 7.0+.
	IndexTypeBlob = 2;

	// 2-dimensional spherical geospatial index.
	IndexTypeGeo2DSphere = 3;
}


// IndexCollectionType is the secondary index collection type.
enum IndexCollectionType {
	// Normal scalar index.
	IndexCollectionTypeDefault = 0;

	// Index list elements.
	IndexCollectionTypeList = 1;

	// Index map keys.
	IndexCollectionTypeMapKeys = 2;

	// Index map values.
	IndexCollectionTypeMapValues = 3;
}


// AuthMode determines authentication mode.
enum AuthMode {
	// AuthModeInternal uses internal authentication only when user/password defined. Hashed password is stored
	// on the server. Do not send clear password. This is the default.
	AuthModeInternal = 0;

	// AuthModeExternal uses external authentication (like LDAP) when user/password defined. Specific external authentication is
	// configured on server.  If TLSConfig is defined, sends clear password on node login via TLS.
	// Will return an error if TLSConfig is not defined.
	AuthModeExternal = 1;

	// AuthModePKI allows authentication and authorization based on a certificate. No user name or
	// password needs to be configured. Requires TLS and a client certificate.
	// Requires server version 5.7.0+
	AuthModePKI = 2;
}

// ReadPolicy encapsulates parameters for transaction policy attributes
// used in all database operation calls.
message ReadPolicy {
	// FilterExpression is the optional Filter Expression. Supported on Server v5.2+
	optional Expression filterExpression = 1;

	// ReadModeAP indicates read policy for AP (availability) namespaces.
	ReadModeAP readModeAP = 2;

	// ReadModeSC indicates read policy for SC (strong consistency) namespaces.
	ReadModeSC readModeSC = 3;

	// TotalTimeout specifies total transaction timeout.
	//
	// The TotalTimeout is tracked on the client and also sent to the server along
	// with the transaction in the wire protocol. The client will most likely
	// timeout first, but the server has the capability to Timeout the transaction.
	//
	// If TotalTimeout is not zero and TotalTimeout is reached before the transaction
	// completes, the transaction will abort with TotalTimeout error.
	//
	// If TotalTimeout is zero, there will be no time limit and the transaction will retry
	// on network timeouts/errors until MaxRetries is exceeded. If MaxRetries is exceeded, the
	// transaction also aborts with Timeout error.
	uint64 totalTimeout = 4;

	// SocketTimeout determines network timeout for each attempt.
	//
	// If SocketTimeout is not zero and SocketTimeout is reached before an attempt completes,
	// the Timeout above is checked. If Timeout is not exceeded, the transaction
	// is retried. If both SocketTimeout and Timeout are non-zero, SocketTimeout must be less
	// than or equal to Timeout, otherwise Timeout will also be used for SocketTimeout.
	uint64 socketTimeout = 5;

	// MaxRetries determines the maximum number of retries before aborting the current transaction.
	// The initial attempt is not counted as a retry.
	//
	// If MaxRetries is exceeded, the transaction will abort with an error.
	//
	// WARNING: Database writes that are not idempotent (such as AddOp)
	// should not be retried because the write operation may be performed
	// multiple times if the client timed out previous transaction attempts.
	// It's important to use a distinct WritePolicy for non-idempotent
	// writes which sets maxRetries = 0;
	uint32 maxRetries = 6;

	// SleepBetweenRtries determines the duration to sleep between retries.  Enter zero to skip sleep.
	// This field is ignored when maxRetries is zero.
	// This field is also ignored in async mode.
	//
	// The sleep only occurs on connection errors and server timeouts
	// which suggest a node is down and the cluster is reforming.
	// The sleep does not occur when the client's socketTimeout expires.
	//
	// Reads do not have to sleep when a node goes down because the cluster
	// does not shut out reads during cluster reformation.  The default for
	// reads is zero.
	//
	// The default for writes is also zero because writes are not retried by default.
	// Writes need to wait for the cluster to reform when a node goes down.
	// Immediate write retries on node failure have been shown to consistently
	// result in errors.  If maxRetries is greater than zero on a write, then
	// sleepBetweenRetries should be set high enough to allow the cluster to
	// reform (>= 500ms).
	int64 sleepBetweenRetries = 7;

	// SleepMultiplier specifies the multiplying factor to be used for exponential backoff during retries.
	// Default to (1.0); Only values greater than 1 are valid.
	double sleepMultiplier = 8;

	// ExitFastOnExhaustedConnectionPool determines if a command that tries to get a
	// connection from the connection pool will wait and retry in case the pool is
	// exhausted until a connection becomes available (or the TotalTimeout is reached).
	// If set to true, an error will be return immediately.
	// If set to false, getting a connection will be retried.
	// This only applies if LimitConnectionsToQueueSize is set to true and the number of open connections to a node has reached ConnectionQueueSize.
	bool exitFastOnExhaustedConnectionPool = 9;

	// SendKey determines to whether send user defined key in addition to hash digest on both reads and writes.
	// If the key is sent on a write, the key will be stored with the record on
	// the server.
	bool sendKey = 10;

	// UseCompression uses zlib compression on command buffers sent to the server and responses received
	// from the server when the buffer size is greater than 128 bytes.
	//
	// This option will increase cpu and memory usage (for extra compressed buffers),but
	// decrease the size of data sent over the network.
	bool useCompression = 11;

	// ReplicaPolicy specifies the algorithm used to determine the target node for a partition derived from a key
	// or requested in a scan/query.
	// Write commands are not affected by this setting, because all writes are directed
	// to the node containing the key's master partition.
	ReplicaPolicy replicaPolicy = 12;
}

// Write policy attributes used in write database commands that are not part of
// the wire protocol.
message WritePolicy {
	ReadPolicy policy = 1;

	// RecordExistsAction qualifies how to handle writes where the record already exists.
	RecordExistsAction recordExistsAction = 2;

	// GenerationPolicy qualifies how to handle record writes based on record generation. The default (NONE)
	// indicates that the generation is not used to restrict writes.
	GenerationPolicy generationPolicy  = 3;

	// Desired consistency guarantee when committing a transaction on the server. The default
	// (COMMIT_ALL) indicates that the server should wait for master and all replica commits to
	// be successful before returning success to the client.
	CommitLevel commitLevel = 4;

	// Generation determines expected generation.
	// Generation is the number of times a record has been
	// modified (including creation) on the server.
	// If a write operation is creating a record, the expected generation would be 0.
	uint32 generation = 5;

	// Expiration determines record expiration in seconds. Also known as TTL (Time-To-Live).
	// Seconds record will live before being removed by the server.
	// Expiration values:
	// TTLServerDefault (0): Default to namespace configuration variable "default-ttl" on the server.
	// TTLDontExpire (MaxUint32): Never expire for Aerospike 2 server versions >= 2.7.2 and Aerospike 3+ server
	// TTLDontUpdate (MaxUint32 - 1): Do not change ttl when record is written. Supported by Aerospike server versions >= 3.10.1
	// > 0: Actual expiration in seconds.
	uint32 expiration = 6;

	// RespondPerEachOp defines for client.Operate() method, return a result for every operation.
	// Some list operations do not return results by default (ListClearOp() for example).
	// This can sometimes make it difficult to determine the desired result offset in the returned
	// bin's result list.
	//
	// Setting RespondPerEachOp to true makes it easier to identify the desired result offset
	// (result offset equals bin's operate sequence). This only makes sense when multiple list
	// operations are used in one operate call and some of those operations do not return results
	// by default.
	bool respondPerEachOp = 7;

	// DurableDelete leaves a tombstone for the record if the transaction results in a record deletion.
	// This prevents deleted records from reappearing after node failures.
	// Valid for Aerospike Server Enterprise Edition 3.10+ only.
	bool durableDelete = 8;
}

// AdminPolicy contains attributes used for Admin commands.
message AdminPolicy {
	// Admin command socket timeout.
	uint32 timeout = 1;
}

// InfoPolicy contains attributes used for info commands.
message InfoPolicy {
	// Info command socket timeout.
	uint32 timeout = 1;
}

// BatchReadPolicy attributes used in batch read commands.
message BatchReadPolicy {
	// FilterExpression is the optional expression filter. If FilterExpression exists and evaluates to false, the specific batch key
	// request is not performed and BatchRecord.ResultCode is set to types.FILTERED_OUT.
	optional Expression filter_expression = 1;

	// ReadModeAP indicates read policy for AP (availability) namespaces.
	ReadModeAP readModeAP = 2;

	// ReadModeSC indicates read policy for SC (strong consistency) namespaces.
	ReadModeSC readModeSC = 3;
}

// BatchWritePolicy attributes used in batch write commands.
message BatchWritePolicy {
	// FilterExpression is optional expression filter. If FilterExpression exists and evaluates to false, the specific batch key
	// request is not performed and BatchRecord#resultCode is set to types.FILTERED_OUT.
	optional Expression filter_expression = 1;

	// RecordExistsAction qualifies how to handle writes where the record already exists.
	RecordExistsAction RecordExistsAction = 2;

	// Desired consistency guarantee when committing a transaction on the server. The default
	// (COMMIT_ALL) indicates that the server should wait for master and all replica commits to
	// be successful before returning success to the client.
	//
	// Default: CommitLevel.COMMIT_ALL
	CommitLevel commitLevel = 3;

	// GenerationPolicy qualifies how to handle record writes based on record generation. The default (NONE)
	// indicates that the generation is not used to restrict writes.
	//
	// The server does not support this field for UDF execute() calls. The read-modify-write
	// usage model can still be enforced inside the UDF code itself.
	//
	// Default: GenerationPolicy.NONE
	// indicates that the generation is not used to restrict writes.
	GenerationPolicy generationPolicy = 4;

	// Expected generation. Generation is the number of times a record has been modified
	// (including creation) on the server. If a write operation is creating a record,
	// the expected generation would be 0. This field is only relevant when
	// generationPolicy is not NONE.
	//
	// The server does not support this field for UDF execute() calls. The read-modify-write
	// usage model can still be enforced inside the UDF code itself.
	//
	// Default: 0
	uint32 generation = 5;

	// Expiration determines record expiration in seconds. Also known as TTL (Time-To-Live).
	// Seconds record will live before being removed by the server.
	// Expiration values:
	// TTLServerDefault (0): Default to namespace configuration variable "default-ttl" on the server.
	// TTLDontExpire (MaxUint32): Never expire for Aerospike 2 server versions >= 2.7.2 and Aerospike 3+ server
	// TTLDontUpdate (MaxUint32 - 1): Do not change ttl when record is written. Supported by Aerospike server versions >= 3.10.1
	// > 0: Actual expiration in seconds.
	uint32 expiration = 6;

	// DurableDelete leaves a tombstone for the record if the transaction results in a record deletion.
	// This prevents deleted records from reappearing after node failures.
	// Valid for Aerospike Server Enterprise Edition 3.10+ only.
	bool durableDelete  = 7;

	// SendKey determines to whether send user defined key in addition to hash digest on both reads and writes.
	// If the key is sent on a write, the key will be stored with the record on
	// the server.
	// The default is to not send the user defined key.
	bool sendKey = 8;
}

// BatchDeletePolicy is used in batch delete commands.
message BatchDeletePolicy {
	// FilterExpression is optional expression filter. If FilterExpression exists and evaluates to false, the specific batch key
	// request is not performed and BatchRecord.ResultCode is set to type.FILTERED_OUT.
	optional Expression filter_expression = 1;

	// Desired consistency guarantee when committing a transaction on the server. The default
	// (COMMIT_ALL) indicates that the server should wait for master and all replica commits to
	// be successful before returning success to the client.
	// Default: CommitLevel.COMMIT_ALL
	CommitLevel commitLevel = 2;

	// Qualify how to handle record deletes based on record generation. The default (NONE)
	// indicates that the generation is not used to restrict deletes.
	// Default: GenerationPolicy.NONE
	GenerationPolicy generationPolicy = 3;

	// Expected generation. Generation is the number of times a record has been modified
	// (including creation) on the server. This field is only relevant when generationPolicy
	// is not NONE.
	// Default: 0
	uint32 generation = 4;

	// If the transaction results in a record deletion, leave a tombstone for the record.
	// This prevents deleted records from reappearing after node failures.
	// Valid for Aerospike Server Enterprise Edition only.
	// Default: false (do not tombstone deleted records).
	bool durableDelete = 5;

	// Send user defined key in addition to hash digest.
	// If true, the key will be stored with the tombstone record on the server.
	// Default: false (do not send the user defined key)
	bool sendKey = 6;
}

// BatchUDFPolicy attributes used in batch UDF execute commands.
message BatchUDFPolicy {
	// Optional expression filter. If FilterExpression exists and evaluates to false, the specific batch key
	// request is not performed and BatchRecord.ResultCode is set to types.FILTERED_OUT.
	optional Expression filter_expression = 1;

	// Desired consistency guarantee when committing a transaction on the server. The default
	// (COMMIT_ALL) indicates that the server should wait for master and all replica commits to
	// be successful before returning success to the client.
	//
	// Default: CommitLevel.COMMIT_ALL
	CommitLevel commitLevel = 2;

	// Expiration determines record expiration in seconds. Also known as TTL (Time-To-Live).
	// Seconds record will live before being removed by the server.
	// Expiration values:
	// TTLServerDefault (0): Default to namespace configuration variable "default-ttl" on the server.
	// TTLDontExpire (MaxUint32): Never expire for Aerospike 2 server versions >= 2.7.2 and Aerospike 3+ server
	// TTLDontUpdate (MaxUint32 - 1): Do not change ttl when record is written. Supported by Aerospike server versions >= 3.10.1
	// > 0: Actual expiration in seconds.
	uint32 expiration = 3;

	// DurableDelete leaves a tombstone for the record if the transaction results in a record deletion.
	// This prevents deleted records from reappearing after node failures.
	// Valid for Aerospike Server Enterprise Edition 3.10+ only.
	bool durableDelete = 4;

	// SendKey determines to whether send user defined key in addition to hash digest on both reads and writes.
	// If the key is sent on a write, the key will be stored with the record on
	// the server.
	// The default is to not send the user defined key.
	bool sendKey = 5;
}

// BatchPolicy encapsulates parameters for policy attributes used in write operations.
// This object is passed into methods where database writes can occur.
message BatchPolicy {
	ReadPolicy policy = 1;

	// Maximum number of concurrent batch request goroutines to server nodes at any point in time.
	// If there are 16 node/namespace combinations requested and ConcurrentNodes is 8,
	// then batch requests will be made for 8 node/namespace combinations in concurrent goroutines.
	// When a request completes, a new request will be issued until all 16 goroutines are complete.
	//
	// Values:
	// 1: Issue batch requests sequentially.  This mode has a performance advantage for small
	// to medium sized batch sizes because requests can be issued in the main transaction goroutine.
	// This is the default.
	// 0: Issue all batch requests in concurrent goroutines.  This mode has a performance
	// advantage for extremely large batch sizes because each node can process the request
	// immediately.  The downside is extra goroutines will need to be created (or taken from
	// a goroutine pool).
	// > 0: Issue up to ConcurrentNodes batch requests in concurrent goroutines.  When a request
	// completes, a new request will be issued until all goroutines are complete.  This mode
	// prevents too many concurrent goroutines being created for large cluster implementations.
	// The downside is extra goroutines will still need to be created (or taken from a goroutine pool).
	optional int32 concurrentNodes = 2;

	// Allow batch to be processed immediately in the server's receiving thread when the server
	// deems it to be appropriate.  If false, the batch will always be processed in separate
	// transaction goroutines.  This field is only relevant for the new batch index protocol.
	//
	// For batch exists or batch reads of smaller sized records (<= 1K per record), inline
	// processing will be significantly faster on "in memory" namespaces.  The server disables
	// inline processing on disk based namespaces regardless of this policy field.
	//
	// Inline processing can introduce the possibility of unfairness because the server
	// can process the entire batch before moving onto the next command.
	bool allowInline = 3;

	// Allow batch to be processed immediately in the server's receiving thread for SSD
	// namespaces. If false, the batch will always be processed in separate service threads.
	// Server versions before 6.0 ignore this field.
	//
	// Inline processing can introduce the possibility of unfairness because the server
	// can process the entire batch before moving onto the next command.
	//
	// Default: false
	bool allowInlineSSD = 4;

	// Should all batch keys be attempted regardless of errors. This field is used on both
	// the client and server. The client handles node specific errors and the server handles
	// key specific errors.
	//
	// If true, every batch key is attempted regardless of previous key specific errors.
	// Node specific errors such as timeouts stop keys to that node, but keys directed at
	// other nodes will continue to be processed.
	//
	// If false, the server will stop the batch to its node on most key specific errors.
	// The exceptions are types.KEY_NOT_FOUND_ERROR and types.FILTERED_OUT which never stop the batch.
	// The client will stop the entire batch on node specific errors for sync commands
	// that are run in sequence (MaxConcurrentThreads == 1). The client will not stop
	// the entire batch for async commands or sync commands run in parallel.
	//
	// Server versions &lt; 6.0 do not support this field and treat this value as false
	// for key specific errors.
	//
	// Default: true
	bool respondAllKeys = 5;

	// AllowPartialResults determines if the results for some nodes should be returned in case
	// some nodes encounter an error. The result for the unreceived records will be nil.
	// The returned records will be safe to use, since only fully received data will be parsed
	// and set.
	//
	// This flag is only supported for BatchGet and BatchGetHeader methods. BatchGetComplex always returns
	// partial results by design.
	bool AllowPartialResults = 6;
}

message Bin {
  string name = 1;
  Value value = 2;
}

message List {
  repeated Value l = 1;
}

message MapEntry {
  Value k = 1;
  Value v = 2;
}

message Map {
	repeated MapEntry m = 1;
}

message JsonEntry {
  string k = 1;
  Value v = 2;
}

message Json {
	repeated JsonEntry j = 1;
}

enum UDFLanguage {
	LUA = 0;
}

message UDFMeta {
	string packageName = 1;
	string hash = 2;
	UDFLanguage language = 3;
}

message Value {
  oneof v {
	bool nil  = 1;
	int64 i = 2;
	double f = 3;
	string s = 4;
	bool b = 5;
	bytes blob = 6;
	List l = 7;
	Map m = 8;
	Json json = 9;
	string geo = 10;
	bytes hll = 11;
	bool wildcard = 12;
	bool infinity = 13;
  }
}

message Key {
  optional bytes digest = 1;
  optional string namespace = 2;
  optional string set = 3;
  optional Value value = 4;
}

message Record {
  Key key = 1;
  uint32 Generation = 2;
  uint32 Expiration = 3;
  map<string, Value> Bins = 4;
}

// The Aerospike Error.
message Error {
  // Status of the corresponding request.
  //  if status equals 0
  //     The proxy received a valid response from Aerospike. The payload's
  //     result code should be used as the client result code.
  //  else
  //     The request failed at the proxy. This status should be used
  //     as the client result code.
  int32 resultCode = 1;

  // This flag indicates that the write transaction may have completed,
  // even though the client sees an error.
  bool inDoubt = 2;
}

// BatchRecord encasulates the Batch key and record result.
message BatchRecord {
	// Key.
	optional Key key = 1;

	// Record result after batch command has completed.  Will be nil if record was not found
	// or an error occurred. See Error.
	optional Record record = 2;

	// Encapsulates the error
	optional Error error = 3;
}

// ListOrderType determines the order of returned values in CDT list operations.
enum ListOrderType {
	// Unordered signifies that list is not ordered. This is the default.
	ListOrderTypeUnordered  = 0;

	// Ordered signifies that list is Ordered.
	ListOrderTypeOrdered  = 1;
}

// MapOrder defines map storage order.
enum MapOrderType {
	// Map is not ordered. This is the default.
	MapOrderTypeUnordered = 0;

	// Order map by key.
	MapOrderTypeKeyOrdered = 1;

	// Order map by key, then value.
	MapOrderTypeKeyValueOrdered = 2;
}

// CDTContext defines Nested CDT context. Identifies the location of nested list/map to apply the operation.
// for the current level.
// An array of CTX identifies location of the list/map on multiple
// levels on nesting.
message CDTContext{
	int32 id    = 1;
	Value value = 2;
}

// Operation contains operation definition.
// This struct is used in client's operate() method.
message Operation {
	oneof op {
		StdOperation std = 1;
		CdtMapOperation map = 2;
		CdtListOperation list = 3;
		CdtHLLOperation hll = 4;
		CdtBitwiseOperation bitwise = 5;
	}
}

// Operation contains operation definition.
// This struct is used in client's operate() method.
message StdOperation {
	// OpType determines type of operation.
	OperationType opType = 1;

  // used in CDT commands
	optional int32 opSubType = 3;

  // CDT context for nested types
	repeated CDTContext ctx = 4;

	// binName (Optional) determines the name of bin used in operation.
	optional string binName = 5;

	// binValue (Optional) determines bin value used in operation.
	optional Value binValue = 6;
}

// BatchWrite encapsulates a batch key and read/write operations with write policy.
message BatchWrite {
	BatchRecord batchRecord = 1;

	// Optional write policy.
	BatchWritePolicy policy = 2;

	// Required operations for this key.
	repeated Operation ops = 3;
}

// BatchRead specifies the Key and bin names used in batch read commands
// where variable bins are needed for each key.
message BatchRead {
	BatchRecord batchRecord = 1;

	// Optional read policy.
	BatchReadPolicy policy = 2;

	// BinNames specifies the Bins to retrieve for this key.
	// BinNames are mutually exclusive with Ops.
	repeated string binNames = 3;

	// ReadAllBins defines what data should be read from the record.
	// If true, ignore binNames and read all bins.
	// If false and binNames are set, read specified binNames.
	// If false and binNames are not set, read record header (generation, expiration) only.
	bool readAllBins = 4;

	// Ops specifies the operations to perform for every key.
	// Ops are mutually exclusive with BinNames.
	// A binName can be emulated with `GetOp(binName)`
	// Supported by server v5.6.0+.
	repeated Operation ops = 5;
}

// BatchDelete encapsulates a batch delete operation.
message BatchDelete {
	BatchRecord batchRecord = 1;

	// policy os the optional write policy.
	BatchDeletePolicy policy = 2;
}

// BatchUDF encapsulates a batch user defined function operation.
message BatchUDF {
	BatchRecord batchRecord = 1;

	// Optional UDF policy.
	BatchUDFPolicy policy = 2;

	// Package or lua module name.
	string packageName = 3;

	// Lua function name.
	string functionName = 4;

	// Optional arguments to lua function.
	repeated Value functionArgs = 5;
}

// UserRoles contains information about a user.
message UserRole {
	// User name.
	string user = 1;

	// Roles is a list of assigned roles.
	repeated string roles = 2;

	// ReadInfo is the list of read statistics. List may be nil.
	// Current statistics by offset are:
	//
	// 0: read quota in records per second
	// 1: single record read transaction rate (TPS)
	// 2: read scan/query record per second rate (RPS)
	// 3: number of limitless read scans/queries
	//
	// Future server releases may add additional statistics.
	repeated uint64 readInfo = 3;

	// WriteInfo is the list of write statistics. List may be nil.
	// Current statistics by offset are:
	//
	// 0: write quota in records per second
	// 1: single record write transaction rate (TPS)
	// 2: write scan/query record per second rate (RPS)
	// 3: number of limitless write scans/queries
	//
	// Future server releases may add additional statistics.
	repeated uint64 writeInfo = 4;

	// ConnsInUse is the number of currently open connections for the user
	uint64 connsInUse = 5;
}

// Role allows granular access to database entities for users.
message Role {
	// Name is role name
	string name = 1;

	// Privilege is the list of assigned privileges
	repeated Privilege privileges = 2;

	// While is the list of allowable IP addresses
	repeated string allowlist = 3;

	// ReadQuota is the maximum reads per second limit for the role
	uint32 ReadQuota = 4;

	// WriteQuota is the maximum writes per second limit for the role
	uint32 writeQuota = 5;
}

// Privilege determines user access granularity.
message Privilege {
	// Role
	string Name = 1;

	// Namespace determines namespace scope. Apply permission to this namespace only.
	// If namespace is zero value, the privilege applies to all namespaces.
	string namespace = 2;

	// Set name scope. Apply permission to this set within namespace only.
	// If set is zero value, the privilege applies to all sets within namespace.
	string setName = 3;
}

// PartitionStatus encapsulates the pagination status in partitions.
message PartitionStatus {
	// BVal
	optional int64 bval = 1;
	// Id shows the partition Id.
	uint32 id = 2;
	// Retry signifies if the partition requires a retry.
	bool retry = 3;
	// Digest records the digest of the last key digest received from the server
	// for this partition.
	bytes digest = 4;
}

// PartitionFilter is used in scan/queries. This filter is also used as a cursor.
//
// If a previous scan/query returned all records specified by a PartitionFilter instance, a
// future scan/query using the same PartitionFilter instance will only return new records added
// after the last record read (in digest order) in each partition in the previous scan/query.
message PartitionFilter {
	uint32 begin = 1;
	uint32 count = 2;
	bytes digest = 3;
	repeated PartitionStatus partitions = 4;
	bool done = 5;
	bool retry = 6;
}

// The response for KV commands.
message AerospikeSingleResponse {
  // Error
  optional Error error = 1;

  // Aerospike wire format request payload.
  optional Record record = 2;
}

message AerospikeGetRequest {
  ReadPolicy policy = 1;
  Key key = 2;
  repeated string binNames = 3;
}

message AerospikeGetHeaderRequest {
  ReadPolicy policy = 1;
  Key key = 2;
}

message AerospikeExistsRequest {
  ReadPolicy policy = 1;
  Key key = 2;
}

// The response for KV commands.
message AerospikeExistsResponse {
  // Error
  optional Error error = 1;

  optional bool exists = 2;
}

message AerospikeDeleteRequest {
  WritePolicy policy = 1;
  Key key = 2;
}

// The response for KV commands.
message AerospikeDeleteResponse {
  // Error
  optional Error error = 1;

  optional bool existed = 2;
}

message AerospikeTouchRequest {
  WritePolicy policy = 1;
  Key key = 2;
}

message AerospikePutRequest {
  WritePolicy policy = 1;
  Key key = 2;
  repeated Bin Bins = 3;
}

message BatchOperate {
  optional BatchRead br = 1;
  optional BatchWrite bw = 2;
  optional BatchDelete bd = 3;
  optional BatchUDF bu = 4;
}

message AerospikeBatchOperateRequest {
  BatchPolicy policy = 1;
  repeated BatchOperate records = 2;
}

message AerospikeBatchOperateResponse {
  optional Error error = 1;
  repeated BatchRecord records = 2;
}

message AerospikeCreateIndexRequest {
	WritePolicy policy = 1;
	string namespace = 2;
	string setName = 3;
	string indexName = 4;
	string binName = 5;
	IndexType indexType = 6;
	IndexCollectionType indexCollectionType = 7;
	repeated CDTContext ctx = 8;
}

message AerospikeCreateIndexResponse {
  optional Error error = 1;
}

message AerospikeDropIndexRequest {
	WritePolicy policy = 1;
	string namespace = 2;
	string setName = 3;
	string indexName = 4;
}

message AerospikeDropIndexResponse {
  optional Error error = 1;
}

message AerospikeTruncateRequest {
	InfoPolicy policy = 1;
	string namespace = 2;
	string setName = 3;
	optional int64 before_nanos = 4;
}

message AerospikeTruncateResponse {
  optional Error error = 1;
}

message AerospikeRegisterUDFRequest {
	WritePolicy policy = 1;
	string packageName = 2;
	bytes udfBody = 3;
	UDFLanguage language = 4;
}

message AerospikeRegisterUDFResponse {
  optional Error error = 1;
}

message AerospikeDropUDFRequest {
	WritePolicy policy = 1;
	string packageName = 2;
}

message AerospikeDropUDFResponse {
  optional Error error = 1;
}

message AerospikeListUDFRequest {
	ReadPolicy policy = 1;
}

message AerospikeListUDFResponse {
  optional Error error = 1;
  repeated UDFMeta udfList = 2;
}

message AerospikeUDFExecuteRequest {
	WritePolicy policy = 1;
	Key key = 2;
	string packageName = 3;
	string functionName = 4;
	repeated Value args = 5;
}

message AerospikeUDFExecuteResponse {
  optional Error error = 1;
  Value result = 2;
}

message AerospikeCreateUserRequest {
	AdminPolicy policy = 1;
	string user = 2;
	string password = 3;
	repeated string roles = 4;
}

message AerospikeCreateUserResponse {
  optional Error error = 1;
}

message AerospikeDropUserRequest {
	AdminPolicy policy = 1;
	string user = 2;
}

message AerospikeDropUserResponse {
  optional Error error = 1;
}

message AerospikeChangePasswordRequest {
	AdminPolicy policy = 1;
	string user = 2;
	string password = 3;
}

message AerospikeChangePasswordResponse {
  optional Error error = 1;
}

message AerospikeGrantRolesRequest {
	AdminPolicy policy = 1;
	string user = 2;
	repeated string roles = 3;
}

message AerospikeGrantRolesResponse {
  optional Error error = 1;
}

message AerospikeRevokeRolesRequest {
	AdminPolicy policy = 1;
	string user = 2;
	repeated string roles = 3;
}

message AerospikeRevokeRolesResponse {
  optional Error error = 1;
}

message AerospikeQueryUsersRequest {
	AdminPolicy policy = 1;
	optional string user = 2;
}

message AerospikeQueryUsersResponse {
  optional Error error = 1;
  repeated UserRole userRoles = 2;
}

message AerospikeQueryRolesRequest {
	AdminPolicy policy = 1;
	optional string roleName = 2;
}

message AerospikeQueryRolesResponse {
  optional Error error = 1;
  repeated Role roles = 2;
}

message AerospikeCreateRoleRequest {
	AdminPolicy policy = 1;
	string roleName = 2;
	repeated Privilege privileges = 3;
	repeated string allowlist = 4;
	uint32 readQuota = 5;
	uint32 writeQuota = 6;
}

message AerospikeCreateRoleResponse {
  optional Error error = 1;
}

message AerospikeDropRoleRequest {
	AdminPolicy policy = 1;
	string roleName = 2;
}

message AerospikeDropRoleResponse {
  optional Error error = 1;
}

message AerospikeGrantPrivilegesRequest {
	AdminPolicy policy = 1;
	string roleName = 2;
	repeated Privilege privileges = 3;
}

message AerospikeGrantPrivilegesResponse {
  optional Error error = 1;
}

message AerospikeRevokePrivilegesRequest {
	AdminPolicy policy = 1;
	string roleName = 2;
	repeated Privilege privileges = 3;
}

message AerospikeRevokePrivilegesResponse {
  optional Error error = 1;
}

message AerospikeSetAllowlistRequest {
	AdminPolicy policy = 1;
	string roleName = 2;
	repeated string allowlist = 3;
}

message AerospikeSetAllowlistResponse {
  optional Error error = 1;
}

message AerospikeSetQuotasRequest {
	AdminPolicy policy = 1;
	string roleName = 2;
	uint32 readQuota = 3;
	uint32 writeQuota = 4;
}

message AerospikeSetQuotasResponse {
  optional Error error = 1;
}

message AerospikeScanRequest {
	ScanPolicy policy = 1;
	string namespace = 2;
	string setName = 3;
	repeated string binNames = 4;
	optional PartitionFilter partitionFilter = 5;
}

message AerospikeStreamResponse {
  Record record = 1;
  Error error = 2;
  optional int64 bval = 3;
}

message AerospikeQueryRequest {
	QueryPolicy policy = 1;
	Statement statement = 2;
	optional PartitionFilter partitionFilter = 5;
}

message AerospikeVersionRequest {
}

message AerospikeVersionResponse {
  string version = 1;
}


// Aerospike KVS operations service
service KVS {
	rpc Version (AerospikeVersionRequest) returns
		(AerospikeVersionResponse) {}
	

	// Put a single record
	rpc Put (AerospikePutRequest) returns
		(Error) {}

	// Add a single record
	rpc Add (AerospikePutRequest) returns
		(Error) {}

	// Append a single record
	rpc Append (AerospikePutRequest) returns
		(Error) {}

	// Prepend a single record
	rpc Prepend (AerospikePutRequest) returns
		(Error) {}

	// Read a single record
	rpc Get(AerospikeGetRequest) returns
		(AerospikeSingleResponse) {}

	// Get a single record header containing metadata like generation, expiration
	rpc GetHeader (AerospikeGetHeaderRequest) returns
		(AerospikeSingleResponse) {}

	// Check if a record exists.
	rpc Exists (AerospikeExistsRequest) returns
		(AerospikeExistsResponse) {}

	// Delete a single record.
	rpc Delete (AerospikeDeleteRequest) returns
		(AerospikeDeleteResponse) {}

	// Reset single record's time to expiration using the write policy's expiration.
	rpc Touch (AerospikeTouchRequest) returns
		(Error) {}

	// Process batch requests.
	rpc BatchOperate (AerospikeBatchOperateRequest) returns
		(AerospikeBatchOperateResponse) {}

	// Process batch requests.
	rpc CreateIndex (AerospikeCreateIndexRequest) returns
		(AerospikeCreateIndexResponse) {}

	// Process batch requests.
	rpc DropIndex (AerospikeDropIndexRequest) returns
		(AerospikeDropIndexResponse) {}

	// Truncate removes records in specified namespace/set efficiently.
	rpc Truncate (AerospikeTruncateRequest) returns
		(AerospikeTruncateResponse) {}

	// Registers a package containing user defined functions with server.
	// This asynchronous server call will return before command is complete.
	// The user can optionally wait for command completion by using the returned
	// RegisterTask instance.
	//
	// This method is only supported by Aerospike 3+ servers.
	rpc RegisterUDF (AerospikeRegisterUDFRequest) returns
		(AerospikeRegisterUDFResponse) {}

	// Removes a package containing user defined functions in the server.
	// This asynchronous server call will return before command is complete.
	// The user can optionally wait for command completion by using the returned
	// RemoveTask instance.
	//
	// This method is only supported by Aerospike 3+ servers.
	rpc DropUDF (AerospikeDropUDFRequest) returns
		(AerospikeDropUDFResponse) {}

	// Lists all packages containing user defined functions in the server.
	// This method is only supported by Aerospike 3+ servers.
	rpc ListUDF (AerospikeListUDFRequest) returns
		(AerospikeListUDFResponse) {}

	// Lists all packages containing user defined functions in the server.
	// This method is only supported by Aerospike 3+ servers.
	rpc UDFExecute (AerospikeUDFExecuteRequest) returns
		(AerospikeUDFExecuteResponse) {}

	// CreateUser creates a new user with password and roles.
	rpc CreateUser (AerospikeCreateUserRequest) returns
		(AerospikeCreateUserResponse) {}


	// DropUser removes a user from the cluster.
	rpc DropUser (AerospikeDropUserRequest) returns
		(AerospikeDropUserResponse) {}

	// ChangePassword changes a user's password. Clear-text password will be hashed using bcrypt before sending to server.
	rpc ChangePassword (AerospikeChangePasswordRequest) returns
		(AerospikeChangePasswordResponse) {}

	// GrantRoles adds roles to user's list of roles.
	rpc GrantRoles (AerospikeGrantRolesRequest) returns
			(AerospikeGrantRolesResponse) {}

	// RevokeRoles removes roles from user's list of roles.
	rpc RevokeRoles (AerospikeRevokeRolesRequest) returns
			(AerospikeRevokeRolesResponse) {}

	// QueryUsers retrieves all users and their roles.
	rpc QueryUsers (AerospikeQueryUsersRequest) returns
				(AerospikeQueryUsersResponse) {}

	// QueryRoles retrieves all roles and their privileges.
	rpc QueryRoles (AerospikeQueryRolesRequest) returns
				(AerospikeQueryRolesResponse) {}

	// CreateRole creates a user-defined role.
	// Quotas require server security configuration "enable-quotas" to be set to true.
	// Pass 0 for quota values for no limit.
	rpc CreateRole (AerospikeCreateRoleRequest) returns
				(AerospikeCreateRoleResponse) {}

	// DropRole removes a user-defined role.
	rpc DropRole (AerospikeDropRoleRequest) returns
				(AerospikeDropRoleResponse) {}

	// GrantPrivileges grant privileges to a user-defined role.
	rpc GrantPrivileges (AerospikeGrantPrivilegesRequest) returns
				(AerospikeGrantPrivilegesResponse) {}

	// RevokePrivileges revokes privileges from a user-defined role.
	rpc RevokePrivileges (AerospikeRevokePrivilegesRequest) returns
				(AerospikeRevokePrivilegesResponse) {}

	// SetAllowlist sets IP address whitelist for a role. If whitelist is nil or empty, it removes existing whitelist from role.
	rpc SetAllowlist (AerospikeSetAllowlistRequest) returns
				(AerospikeSetAllowlistResponse) {}

	// SetQuotas sets maximum reads/writes per second limits for a role.  If a quota is zero, the limit is removed.
	// Quotas require server security configuration "enable-quotas" to be set to true.
	// Pass 0 for quota values for no limit.
	rpc SetQuotas (AerospikeSetQuotasRequest) returns
				(AerospikeSetQuotasResponse) {}

	rpc Scan (AerospikeScanRequest) returns
				(stream AerospikeStreamResponse) {}

	rpc Query (AerospikeQueryRequest) returns
				(stream AerospikeStreamResponse) {}

}

enum OperationType {
  OperationTypeGet = 0;
  OperationTypeGetHeader = 1;
  OperationTypePut = 2;
  OperationTypeAdd = 3;
  OperationTypeAppend = 4;
  OperationTypePrepend = 5;
  OperationTypeTouch = 6;
  OperationTypeDelete = 7;
}

enum RecordExistsAction {
  // Create or update record.
  // Merge write command bins with existing bins.
  UPDATE = 0;

  // Update record only. Fail if record does not exist.
  // Merge write command bins with existing bins.
  UPDATE_ONLY = 1;

  // Create or replace record.
  // Delete existing bins not referenced by write command bins.
  // Supported by Aerospike server versions &gt;= 3.1.6.
  REPLACE = 2;

  // Replace record only. Fail if record does not exist.
  // Delete existing bins not referenced by write command bins.
  // Supported by Aerospike server versions &gt;= 3.1.6.
  REPLACE_ONLY = 3;

  // Create only.  Fail if record exists.
  CREATE_ONLY = 4;
}

enum GenerationPolicy {
  // Do not use record generation to restrict writes.
  NONE = 0;

  // Update/delete record if expected generation is equal to server generation. Otherwise, fail.
  EXPECT_GEN_EQUAL = 1;

  // Update/delete record if expected generation greater than the server generation. Otherwise, fail.
  // This is useful for restore after backup.
  EXPECT_GEN_GT = 2;
}

enum CommitLevel {
  // Server should wait until successfully committing master and all replicas.
  COMMIT_ALL = 0;

  // Server should wait until successfully committing master only.
  COMMIT_MASTER = 1;
}

message BackgroundExecutePolicy {
  // Read policy for AP (availability) namespaces.
  ReplicaPolicy replica = 1;

  // Read policy for SC (strong consistency) namespaces.
  ReadModeAP readModeAP = 2;

  // Replica algorithm used to determine the target node
  // for a single record command.
  // Scan and scan are not affected by replica algorithms.
  ReadModeSC readModeSC = 3;

  // Use zlib compression on command buffers sent to the server and responses received
  // from the server when the buffer size is greater than 128 bytes.
  // This option will increase cpu and memory usage (for extra compressed buffers),but
  // decrease the size of data sent over the network.
  bool compress = 4;

  // Optional expression filter. If filterExp exists and evaluates to false, the
  // transaction is ignored.
  optional bytes expression = 5;

  // Total transaction timeout in milliseconds.
  // Default for all other commands: 1000ms
  optional uint32 totalTimeout = 6;

  // Send user defined key in addition to hash digest on both reads and writes.
  // If the key is sent on a write, the key will be stored with the record on
  // the server.
  // <p>
  // Default: false (do not send the user defined key)
  optional bool sendKey = 7;

  // Qualify how to handle writes where the record already exists.
  //
  // Default: RecordExistsAction.UPDATE
  optional RecordExistsAction recordExistsAction = 8;

  // Qualify how to handle record writes based on record generation. The default (NONE)
  // indicates that the generation is not used to restrict writes.
  //
  // The server does not support this field for UDF execute() calls. The read-modify-write
  // usage model can still be enforced inside the UDF code itself.
  //
  // Default: GenerationPolicy.NONE
  optional GenerationPolicy generationPolicy = 9;

  // Desired consistency guarantee when committing a transaction on the server. The default
  // (COMMIT_ALL) indicates that the server should wait for master and all replica commits to
  // be successful before returning success to the client.
  //
  // Default: CommitLevel.COMMIT_ALL
  optional CommitLevel commitLevel = 10;

  // Expected generation. Generation is the number of times a record has been modified
  // (including creation) on the server. If a write operation is creating a record,
  // the expected generation would be <code>0</code>. This field is only relevant when
  // generationPolicy is not NONE.
  //
  // The server does not support this field for UDF execute() calls. The read-modify-write
  // usage model can still be enforced inside the UDF code itself.
  //
  // Default: 0
  optional uint32 generation = 11;

  // Record expiration. Also known as ttl (time to live).
  // Seconds record will live before being removed by the server.
  //
  // Expiration values:
  //
  //  - -2: Do not change ttl when record is updated.
  //  - -1: Never expire.
  //  - 0: Default to namespace configuration variable "default-ttl" on the server.
  //  - &gt; 0: Actual ttl in seconds.<br>
  //
  // Default: 0
  optional uint32 expiration = 12;

  // For client operate(), return a result for every operation.
  //
  // Some operations do not return results by default (ListOperation.clear() for example).
  // This can make it difficult to determine the desired result offset in the returned
  // bin's result list.
  //
  // Setting respondAllOps to true makes it easier to identify the desired result offset
  // (result offset equals bin's operate sequence).  If there is a map operation in operate(),
  // respondAllOps will be forced to true for that operate() call.
  //
  // Default: false
  optional bool respondAllOps = 13;

  // If the transaction results in a record deletion, leave a tombstone for the record.
  // This prevents deleted records from reappearing after node failures.
  // Valid for Aerospike Server Enterprise Edition 3.10+ only.
  //
  // Default: false (do not tombstone deleted records).
  optional bool durableDelete = 14;

  // Operate in XDR mode.  Some external connectors may need to emulate an XDR client.
  // If enabled, an XDR bit is set for writes in the wire protocol.
  //
  // Default: false.
  optional bool xdr = 15;
}

// MultiPolicy contains parameters for policy attributes used in
// query and scan operations.
message MultiPolicy {
	ReadPolicy readPolicy = 1;

	// Maximum number of concurrent requests to server nodes at any point in time.
	// If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then queries
	// will be made to 8 nodes in parallel.  When a query completes, a new query will
	// be issued until all 16 nodes have been queried.
	// Default (0) is to issue requests to all server nodes in parallel.
	// 1 will to issue requests to server nodes one by one avoiding parallel queries.
	uint32 maxConcurrentNodes = 2;

	// MaxRecords approximates the number of records to return to the client. This number is divided by the
	// number of nodes involved in the query. The actual number of records returned
	// may be less than MaxRecords if node record counts are small and unbalanced across
	// nodes.
	//
	// This field is supported on server versions >= 4.9.
	//
	// Default: 0 (do not limit record count)
	uint64 maxRecords = 3;

	// RecordsPerSecond limits returned records per second (rps) rate for each server.
	// Will not apply rps limit if recordsPerSecond is zero (default).
	// Currently only applicable to a query without a defined filter.
	uint64 recordsPerSecond = 4;

	// Number of records to place in queue before blocking.
	// Records received from multiple server nodes will be placed in a queue.
	// A separate goroutine consumes these records in parallel.
	// If the queue is full, the producer goroutines will block until records are consumed.
	uint32 recordQueueSize = 5;

	// Indicates if bin data is retrieved. If false, only record digests are retrieved.
	bool includeBinData = 6;
}

// ScanPolicy encapsulates parameters used in scan operations.
message ScanPolicy {
	MultiPolicy multiPolicy = 1;
}

// QueryDuration defines the expected query duration. The server treats the query in different ways depending on the expected duration.
// This enum is ignored for aggregation queries, background queries and server versions < 6.0.
enum QueryDuration {
	// LONG specifies that the query is expected to return more than 100 records per node. The server optimizes for a large record set in
	// the following ways:
	//
	// Allow query to be run in multiple threads using the server's query threading configuration.
	// Do not relax read consistency for AP namespaces.
	// Add the query to the server's query monitor.
	// Do not add the overall latency to the server's latency histogram.
	// Do not allow server timeouts.
	Long = 0;

	// Short specifies that the query is expected to return less than 100 records per node. The server optimizes for a small record set in
	// the following ways:
	// Always run the query in one thread and ignore the server's query threading configuration.
	// Allow query to be inlined directly on the server's service thread.
	// Relax read consistency for AP namespaces.
	// Do not add the query to the server's query monitor.
	// Add the overall latency to the server's latency histogram.
	// Allow server timeouts. The default server timeout for a short query is 1 second.
	Short = 1;

	// LONG_RELAX_AP will treat query as a LONG query, but relax read consistency for AP namespaces.
	// This value is treated exactly like LONG for server versions < 7.1.
	LongRelaxAP = 2;
}

// QueryPolicy encapsulates parameters for policy attributes used in query operations.
message QueryPolicy {
	MultiPolicy multiPolicy = 1;
	// ShortQuery detemines wether query expected to return less than 100 records.
	// If true, the server will optimize the query for a small record set.
	// This field is ignored for aggregation queries, background queries
	// and server versions 6.0+.
	//
	// Default: false
	QueryDuration expectedDuration = 2;
}

// Statement encapsulates query statement parameters.
message UDFCall {
	string packageName = 6;
	string functionName = 7;
	repeated Value functionArgs = 8;
}

// Statement encapsulates query statement parameters.
message Statement {
	// Namespace determines query Namespace
	string Namespace = 1;

	// SetName determines query Set name (Optional)
	string SetName = 2;

	// IndexName determines query index name (Optional)
	// If not set, the server will determine the index from the filter's bin name.
	optional string IndexName = 3;

	// BinNames detemines bin names (optional)
	repeated string BinNames = 4;

	// Filter determines query index filter (Optional).
	// This filter is applied to the secondary index on query.
	// Query index filters must reference a bin which has a secondary index defined.
	QueryFilter filter = 5;

	// TaskId determines query task id. (Optional)
	// This value is not used anymore and will be removed later.
	uint64 taskId = 6;

	// determines if the query should return data
	bool returnData = 7;

	optional UDFCall udfCall = 8;
}

// QueryFilter specifies a query filter definition.
message QueryFilter {
	string name = 1;
	IndexCollectionType idxType = 2;
	uint32 valueParticleType = 3;
	Value begin = 4;
	Value end = 5;
	repeated CDTContext ctx = 6;
}

enum CdtMapCommandOp {
	CdtMapCommandOpCreate = 0;
	CdtMapCommandOpCreateWithIndex = 1;
	CdtMapCommandOpSetPolicy = 2;
	CdtMapCommandOpPut = 3;
	CdtMapCommandOpPutItems = 4;
	CdtMapCommandOpIncrement = 5;
	CdtMapCommandOpDecrement = 6;
	CdtMapCommandOpClear = 7;
	CdtMapCommandOpRemoveByKey = 8;
	CdtMapCommandOpRemoveByKeyList = 9;
	CdtMapCommandOpRemoveByKeyRange = 10;
	CdtMapCommandOpRemoveByValue = 11;
	CdtMapCommandOpRemoveByValueList = 12;
	CdtMapCommandOpRemoveByValueRange = 13;
	CdtMapCommandOpRemoveByValueRelativeRankRange = 14;
	CdtMapCommandOpRemoveByValueRelativeRankRangeCount = 15;
	CdtMapCommandOpRemoveByIndex = 16;
	CdtMapCommandOpRemoveByIndexRange = 17;
	CdtMapCommandOpRemoveByIndexRangeCount = 18;
	CdtMapCommandOpRemoveByRank = 19;
	CdtMapCommandOpRemoveByRankRange = 20;
	CdtMapCommandOpRemoveByRankRangeCount = 21;
	CdtMapCommandOpRemoveByKeyRelativeIndexRange = 22;
	CdtMapCommandOpRemoveByKeyRelativeIndexRangeCount = 23;
	CdtMapCommandOpSize = 24;
	CdtMapCommandOpGetByKey = 25;
	CdtMapCommandOpGetByKeyRange = 26;
	CdtMapCommandOpGetByKeyRelativeIndexRange = 27;
	CdtMapCommandOpGetByKeyRelativeIndexRangeCount =28 ;
	CdtMapCommandOpGetByKeyList = 29;
	CdtMapCommandOpGetByValue = 30;
	CdtMapCommandOpGetByValueRange = 31;
	CdtMapCommandOpGetByValueRelativeRankRange = 32;
	CdtMapCommandOpGetByValueRelativeRankRangeCount = 33;
	CdtMapCommandOpGetByValueList = 34;
	CdtMapCommandOpGetByIndex = 35;
	CdtMapCommandOpGetByIndexRange = 36;
	CdtMapCommandOpGetByIndexRangeCount = 37;
	CdtMapCommandOpGetByRank = 38;
	CdtMapCommandOpGetByRankRange = 39;
	CdtMapCommandOpGetByRankRangeCount = 40;
}

enum CdtMapReturnType {
	// NONE will will not return a result.
	CdtMapReturnTypeNone = 0;

	// INDEX will return key index order.
	//
	// 0 = first key
	// N = Nth key
	// -1 = last key
	CdtMapReturnTypeIndex = 1;

	// REVERSE_INDEX will return reverse key order.
	//
	// 0 = last key
	// -1 = first key
	CdtMapReturnTypeReverseIndex = 2;

	// RANK will return value order.
	//
	// 0 = smallest value
	// N = Nth smallest value
	// -1 = largest value
	CdtMapReturnTypeRank = 3;

	// REVERSE_RANK will return reverse value order.
	//
	// 0 = largest value
	// N = Nth largest value
	// -1 = smallest value
	CdtMapReturnTypeReverseRank = 4;

	// COUNT will return count of items selected.
	CdtMapReturnTypeCount = 5;

	// KEY will return key for single key read and key list for range read.
	CdtMapReturnTypeKey = 6;

	// VALUE will return value for single key read and value list for range read.
	CdtMapReturnTypeValue = 7;

	// KEY_VALUE will return key/value items. The possible return types are:
	CdtMapReturnTypeKeyValue = 8;

	// EXISTS returns true if count > 0.
	CdtMapReturnTypeExists = 13;

	// UNORDERED_MAP returns an unordered map.
	CdtMapReturnTypeUnorderedMap = 16;

	// ORDERED_MAP returns an ordered map.
	CdtMapReturnTypeOrderedMap = 17;

	// INVERTED will invert meaning of map command and return values.  For example:
	// MapRemoveByKeyRange(binName, keyBegin, keyEnd, MapReturnType.KEY | MapReturnType.INVERTED)
	// With the INVERTED flag enabled, the keys outside of the specified key range will be removed and returned.
	CdtMapReturnTypeInverted = 12;
}

enum CdtMapWriteMode {
	CdtMapWriteModeUpdate = 0;
	CdtMapWriteModeUpdateOnly = 1;
	CdtMapWriteModeCreateOnly = 2;
}

enum CdtMapWriteFlags {
	// MapWriteFlagsDefault is the Default. Allow create or update.
	CdtMapWriteFlagsDefault = 0;

	// MapWriteFlagsCreateOnly means: If the key already exists, the item will be denied.
	// If the key does not exist, a new item will be created.
	CdtMapWriteFlagsCreateOnly = 1;

	// MapWriteFlagsUpdateOnly means: If the key already exists, the item will be overwritten.
	// If the key does not exist, the item will be denied.
	CdtMapWriteFlagsUpdateOnly = 2;

	// MapWriteFlagsNoFail means: Do not raise error if a map item is denied due to write flag constraints.
	CdtMapWriteFlagsNoFail = 4;

	// MapWriteFlagsNoFail means: Allow other valid map items to be committed if a map item is denied due to
	// write flag constraints.
	CdtMapWriteFlagsPartial = 8;
}

message CdtMapPolicy {
	MapOrderType mapOrder = 1;
	CdtMapWriteFlags flags = 3;
	bool PersistedIndex = 4;
}

message CdtMapOperation {
	CdtMapCommandOp op = 1;
	CdtMapPolicy policy = 2;
	string binName = 3;
	repeated Value args = 4;
	optional CdtMapReturnType returnType = 5;
	repeated CDTContext ctx = 6;
}

enum CdtListCommandOp {
	CdtListCommandOpCreate = 0;
	CdtListCommandOpSetOrder = 1;
	CdtListCommandOpAppend = 2;
	CdtListCommandOpInsert = 3;
	CdtListCommandOpPop = 4;
	CdtListCommandOpPopRange = 5;
	CdtListCommandOpPopRangeFrom = 6;
	CdtListCommandOpSet = 7;
	CdtListCommandOpTrim = 8;
	CdtListCommandOpClear = 9;
	CdtListCommandOpIncrement = 10;
	CdtListCommandOpSize = 11;

	CdtListCommandOpSort = 12;
	CdtListCommandOpGetByValueList = 13;
	CdtListCommandOpGetByValueRange = 14;
	CdtListCommandOpGetByIndex = 15;
	CdtListCommandOpGetByIndexRange = 16;
	CdtListCommandOpGetByIndexRangeCount = 17;
	CdtListCommandOpGetByRank = 18;
	CdtListCommandOpGetByRankRange = 19;
	CdtListCommandOpGetByRankRangeCount = 20;
	CdtListCommandOpGetByValueRelativeRankRange = 21;
	CdtListCommandOpGetByValueRelativeRankRangeCount = 22;

	CdtListCommandOpRemoveByValueList = 23;
	CdtListCommandOpRemoveByValueRange = 24;
	CdtListCommandOpRemoveByValueRelativeRankRange = 25;
	CdtListCommandOpRemoveByValueRelativeRankRangeCount = 26;
	CdtListCommandOpRemoveRange = 27;
	CdtListCommandOpRemoveRangeFrom = 28;
	CdtListCommandOpRemoveByIndex = 29;
	CdtListCommandOpRemoveByIndexRange = 30;
	CdtListCommandOpRemoveByIndexRangeCount = 31;
	CdtListCommandOpRemoveByRank = 32;
	CdtListCommandOpRemoveByRankRange = 33;
	CdtListCommandOpRemoveByRankRangeCount = 34;
}


enum CdtListReturnType {
	// CdtListReturnTypeNone will not return a result.
	CdtListReturnTypeNone = 0;

	// CdtListReturnTypeIndex will return index offset order.
	// 0 = first key
	// N = Nth key
	// -1 = last key
	CdtListReturnTypeIndex = 1;

	// CdtListReturnTypeReverseIndex will return reverse index offset order.
	// 0 = last key
	// -1 = first key
	CdtListReturnTypeReverseIndex = 2;

	// CdtListReturnTypeRank will return value order.
	// 0 = smallest value
	// N = Nth smallest value
	// -1 = largest value
	CdtListReturnTypeRank = 3;

	// CdtListReturnTypeReverseRank will return reverse value order.
	// 0 = largest value
	// N = Nth largest value
	// -1 = smallest value
	CdtListReturnTypeReverseRank = 4;

	// CdtListReturnTypeCount will return count of items selected.
	CdtListReturnTypeCount = 5;

	// CdtListReturnTypeValue will return value for single key read and value list for range read.
	CdtListReturnTypeValue = 7;

	// CdtListReturnTypeExists returns true if count > 0.
	CdtListReturnTypeExists = 13;
}

enum CdtListSortFlags {
	// CdtListSortFlagsDefault is the default sort flag for CDT lists, and sort in Ascending order.
	CdtListSortFlagsDefault = 0;
	// CdtListSortFlagsDescending will sort the contents of the list in descending order.
	CdtListSortFlagsDescending = 1;
	// CdtListSortFlagsDropDuplicates will drop duplicate values in the results of the CDT list operation.
	CdtListSortFlagsDropDuplicates = 2;
}

enum CdtListWriteFlags {
	// CdtListWriteFlagsDefault is the default behavior. It means:  Allow duplicate values and insertions at any index.
	CdtListWriteFlagsDefault = 0;
	// CdtListWriteFlagsAddUnique means: Only add unique values.
	CdtListWriteFlagsAddUnique = 1;
	// CdtListWriteFlagsInsertBounded means: Enforce list boundaries when inserting.  Do not allow values to be inserted
	// at index outside current list boundaries.
	CdtListWriteFlagsInsertBounded = 2;
	// CdtListWriteFlagsNoFail means: do not raise error if a list item fails due to write flag constraints.
	CdtListWriteFlagsNoFail = 4;
	// CdtListWriteFlagsPartial means: allow other valid list items to be committed if a list item fails due to
	// write flag constraints.
	CdtListWriteFlagsPartial = 8;
}

message CdtListPolicy {
	ListOrderType order = 1;
	CdtListWriteFlags flags = 2;
}

message CdtListOperation {
	CdtListCommandOp op = 1;
	CdtListPolicy policy = 2;
	string binName = 3;
	repeated Value args = 4;
	optional CdtListReturnType returnType = 5;
	repeated CDTContext ctx = 6;
}

enum CdtHLLCommandOp {
	CdtHLLCommandOpInit = 0;
	CdtHLLCommandOpAdd = 1;
	CdtHLLCommandOpSetUnion = 2;
	CdtHLLCommandOpRefreshCount = 3;
	CdtHLLCommandOpFold = 4;
	CdtHLLCommandOpGetCount = 5;
	CdtHLLCommandOpGetUnion = 6;
	CdtHLLCommandOpGetUnionCount = 7;
	CdtHLLCommandOpGetIntersectCount = 8;
	CdtHLLCommandOpGetSimilarity = 9;
	CdtHLLCommandOpDescribe = 10;
}

enum CdtHLLWriteFlags {
	// CdtHLLWriteFlagsDefault is Default. Allow create or update.
	CdtHLLWriteFlagsDefault = 0;

	// CdtHLLWriteFlagsCreateOnly behaves like the following:
	// If the bin already exists, the operation will be denied.
	// If the bin does not exist, a new bin will be created.
	CdtHLLWriteFlagsCreateOnly = 1;

	// CdtHLLWriteFlagsUpdateOnly behaves like the following:
	// If the bin already exists, the bin will be overwritten.
	// If the bin does not exist, the operation will be denied.
	CdtHLLWriteFlagsUpdateOnly = 2;

	// CdtHLLWriteFlagsNoFail does not raise error if operation is denied.
	CdtHLLWriteFlagsNoFail = 4;

	// CdtHLLWriteFlagsAllowFold allows the resulting set to be the minimum of provided index bits.
	// Also, allow the usage of less precise HLL algorithms when minHash bits
	// of all participating sets do not match.
	CdtHLLWriteFlagsAllowFold = 8;
}

// HLLPolicy determines the HyperLogLog operation policy.
message CdtHLLPolicy {
	CdtHLLWriteFlags flags = 1;
}

message CdtHLLOperation {
	CdtHLLCommandOp op = 1;
	CdtHLLPolicy policy = 2;
	string binName = 3;
	repeated Value args = 4;
}

///////////////////////////////////

enum CdtBitwiseCommandOp {
	CdtBitwiseCommandOpResize = 0;
	CdtBitwiseCommandOpInsert = 1;
	CdtBitwiseCommandOpRemove = 2;
	CdtBitwiseCommandOpSet = 3;
	CdtBitwiseCommandOpOr = 4;
	CdtBitwiseCommandOpXor = 5;
	CdtBitwiseCommandOpAnd = 6;
	CdtBitwiseCommandOpNot = 7;
	CdtBitwiseCommandOpLShift = 8;
	CdtBitwiseCommandOpRShift = 9;
	CdtBitwiseCommandOpAdd = 10;
	CdtBitwiseCommandOpSubtract = 11;
	CdtBitwiseCommandOpSetInt = 12;
	CdtBitwiseCommandOpGet = 13;
	CdtBitwiseCommandOpCount = 14;
	CdtBitwiseCommandOpLScan = 15;
	CdtBitwiseCommandOpRScan = 16;
	CdtBitwiseCommandOpGetInt = 17;
}

enum CdtBitwiseWriteFlags {
	// CdtBitwiseWriteFlagsDefault allows create or update.
	CdtBitwiseWriteFlagsDefault = 0;

	// CdtBitwiseWriteFlagsCreateOnly specifies that:
	// If the bin already exists, the operation will be denied.
	// If the bin does not exist, a new bin will be created.
	CdtBitwiseWriteFlagsCreateOnly = 1;

	// CdtBitwiseWriteFlagsUpdateOnly specifies that:
	// If the bin already exists, the bin will be overwritten.
	// If the bin does not exist, the operation will be denied.
	CdtBitwiseWriteFlagsUpdateOnly = 2;

	// CdtBitwiseWriteFlagsNoFail specifies not to raise error if operation is denied.
	CdtBitwiseWriteFlagsNoFail = 4;

	// CdtBitwiseWriteFlagsPartial allows other valid operations to be committed if this operations is
	// denied due to flag constraints.
	CdtBitwiseWriteFlagsPartial = 8;
}

enum CdtBitwiseResizeFlags {
	// CdtBitwiseResizeFlagsDefault specifies the defalt flag.
	CdtBitwiseResizeFlagsDefault = 0;

	// CdtBitwiseResizeFlagsFromFront Adds/removes bytes from the beginning instead of the end.
	CdtBitwiseResizeFlagsFromFront = 1;

	// CdtBitwiseResizeFlagsGrowOnly will only allow the []byte size to increase.
	CdtBitwiseResizeFlagsGrowOnly = 2;

	// CdtBitwiseResizeFlagsShrinkOnly will only allow the []byte size to decrease.
	CdtBitwiseResizeFlagsShrinkOnly = 4;
}

enum CdtBitwiseOverflowAction {
	// CdtBitwiseOverflowActionFail specifies to fail operation with error.
	CdtBitwiseOverflowActionFail = 0;

	// CdtBitwiseOverflowActionSaturate specifies that in add/subtract overflows/underflows, set to max/min value.
	// Example: MAXINT + 1 = MAXINT
	CdtBitwiseOverflowActionSaturate = 2;

	// CdtBitwiseOverflowActionWrap specifies that in add/subtract overflows/underflows, wrap the value.
	// Example: MAXINT + 1 = -1
	CdtBitwiseOverflowActionWrap = 4;
}


// BitwisePolicy determines the HyperLogLog operation policy.
message CdtBitwisePolicy {
	CdtBitwiseWriteFlags flags = 1;
}

message CdtBitwiseOperation {
	CdtBitwiseCommandOp op = 1;
	CdtBitwisePolicy policy = 2;
	string binName = 3;
	repeated Value args = 4;
	repeated CDTContext ctx = 6;
}
