# -----------------------------------------------------
#
# Aerospike Local Daemon configuration file.
#
# -----------------------------------------------------

[cluster]
socket = "/tmp/asld_grpc.sock"
host = "127.0.0.1:3000"
#user = "default-user"
#password = "default-password"
#auth = "EXTERNAL"

# ClusterName sets the expected cluster ID.  If not nil, server nodes must return this cluster ID in order to
# join the client's view of the cluster. Should only be set when connecting to servers that
# support the "cluster-name" info command. (v3.10+)
cluster-name = ""

# Initial host connection timeout duration. The timeout when opening a connection
# to the server host for the first time.
timeout = "30s"

# Connection idle timeout. Every time a connection is used, its idle
# deadline will be extended by this duration. When this deadline is reached,
# the connection will be closed and discarded from the connection pool.
# The value is limited to 24 hours (86400s).
#
# It's important to set this value to a few seconds less than the server's proto-fd-idle-ms
# (default 60000 milliseconds or 1 minute), so the client does not attempt to use a socket
# that has already been reaped by the server.
#
# Connection pools are now implemented by a LIFO stack. Connections at the tail of the
# stack will always be the least used. These connections are checked for IdleTimeout
# on every tend (usually 1 second).
#
# Default: 0 seconds
idle-timeout = "0"

# LoginTimeout specifies the timeout for login operation for external authentication such as LDAP.
login-timeout = "10s"

# ConnectionQueueCache specifies the size of the Connection Queue cache PER NODE.
# Note: One connection per node is reserved for tend operations and is not used for transactions.
connection-queue-size = 100

# MinConnectionsPerNode specifies the minimum number of synchronous connections allowed per server node.
# Preallocate min connections on client node creation.
# The client will periodically allocate new connections if count falls below min connections.
#
# Server proto-fd-idle-ms may also need to be increased substantially if min connections are defined.
# The proto-fd-idle-ms default directs the server to close connections that are idle for 60 seconds
# which can defeat the purpose of keeping connections in reserve for a future burst of activity.
#
# If server proto-fd-idle-ms is changed, client ClientPolicy.IdleTimeout should also be
# changed to be a few seconds less than proto-fd-idle-ms.
min-connections-per-node = 0

# MaxErrorRate defines the maximum number of errors allowed per node per ErrorRateWindow before
# the circuit-breaker algorithm returns MAX_ERROR_RATE on database commands to that node.
# If MaxErrorRate is zero, there is no error limit and
# the exception will never be thrown.
#
# The counted error types are any error that causes the connection to close (socket errors
# and client timeouts) and types.ResultCode.DEVICE_OVERLOAD.
max-error-rate = 100

# ErrorRateWindow defined the number of cluster tend iterations that defines the window for MaxErrorRate.
# One tend iteration is defined as TendInterval plus the time to tend all nodes.
# At the end of the window, the error count is reset to zero and backoff state is removed
# on all nodes.
error-rate-window = 1

# If set to true, will not create a new connection
# to the node if there are already `ConnectionQueueSize` active connections.
# Note: One connection per node is reserved for tend operations and is not used for transactions.
limit-connections-to-queue-size = true

# Number of connections allowed to established at the same time.
# This value does not limit the number of connections. It just
# puts a threshold on the number of parallel opening connections.
# By default, there are no limits.
opening-connection-threshold = 0

# Throw exception if host connection fails during addHost().
fail-if-not-connected = true

tend-interval = "1s"

# TendInterval determines interval for checking for cluster state changes.
# UseServicesAlternate determines if the client should use "services-alternate" instead of "services"
# in info request during cluster tending.
#"services-alternate" returns server configured external IP addresses that client
# uses to talk to nodes.  "services-alternate" can be used in place of providing a client "ipMap".
# This feature is recommended instead of using the client-side IpMap above.
#
# "services-alternate" is available with Aerospike Server versions >= 3.7.1.
use-services-alternate = false

# RackAware directs the client to update rack information on intervals.
# When this feature is enabled, the client will prefer to use nodes which reside
# on the same rack as the client for read transactions. The application should also set the RackId, and
# use the ReplicaPolicy.PREFER_RACK for reads.
# This feature is in particular useful if the cluster is in the cloud and the cloud provider
# is charging for network bandwidth out of the zone. Keep in mind that the node on the same rack
# may not be the Master, and as such the data may be stale. This setting is particularly usable
# for clusters that are read heavy.
rack-aware = false

# RackIds defines the list of acceptable racks in order of preference. Nodes in RackIds[0] are chosen first.
# If a node is not found in rackIds[0], then nodes in rackIds[1] are searched, and so on.
# If rackIds is set, ClientPolicy.RackId is ignored.
#
# ClientPolicy.RackAware, ReplicaPolicy.PREFER_RACK and server rack
# configuration must also be set to enable this functionality.
rack-ids = []

# IgnoreOtherSubnetAliases helps to ignore aliases that are outside main subnet
ignore-other-subnet-aliases = false

# SeedOnlyCluster enforces the client to use only the seed addresses.
# Peers nodes for the cluster are not discovered and seed nodes are
# retained despite connection failures.
seed-only-cluster = false
