<?php

namespace PhpBench;

use Traversable;

function normalize_parameter_set($parameterSet) 
{
    if ($parameterSet instanceof Traversable) {
        $parameterSet = iterator_to_array($parameterSet);
    }

    if (!is_array($parameterSet)) {
        throw new \RuntimeException(sprintf(
            'Parameter set must be an array, got "%s"',
            gettype($parameterSet)
        ));
    }

    $keys = array_keys($parameterSet);
    return array_combine($keys, array_map(function (string $key, $parameters) {
        if (!is_array($parameters)) {
            throw new \RuntimeException(sprintf(
                'Parameters in set "%s" must be an array, got "%s"',
                $key,
                gettype($parameters)
            ));
        }
        return array_map(function ($value) {
            return serialize($value);
        }, $parameters);
    }, $keys, $parameterSet));
}

$bootstrap = '{{ bootstrap }}';
$file = '{{ file }}';
$class = '{{ class }}';

if ($bootstrap) {
    call_user_func(function () use ($bootstrap) {
        require_once($bootstrap);
    });
}

require_once($file);

$paramProviders = {{ paramProviders }};
$benchmark = new $class();
$parameterSets = array();

// don't let the user benchmark output anything
ob_start();

foreach ($paramProviders as $paramProvider) {
    if (is_callable([$benchmark, $paramProvider])) {
        $parameterSets[] = normalize_parameter_set($benchmark->$paramProvider());
        continue;
    }

    if (is_callable($paramProvider)) {
        $parameterSets[] = normalize_parameter_set($paramProvider());
        continue;
    }

    throw new \RuntimeException(sprintf(
        'Class has no method "%s" and it is not a callable', $paramProvider
    ));
}

ob_end_clean();

echo serialize($parameterSets);
exit(0);
